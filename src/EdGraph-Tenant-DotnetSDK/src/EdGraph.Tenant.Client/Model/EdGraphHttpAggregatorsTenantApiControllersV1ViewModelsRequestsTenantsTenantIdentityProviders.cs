/*
 * Tenant Api
 *
 * Tenant Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.Tenant.Client.Client.OpenAPIDateConverter;

namespace EdGraph.Tenant.Client.Model
{
    /// <summary>
    /// EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviders
    /// </summary>
    [DataContract(Name = "EdGraph.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Requests.Tenants.TenantIdentityProviders")]
    public partial class EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviders : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets IdentityProviderId
        /// </summary>
        [DataMember(Name = "identityProviderId", EmitDefaultValue = false)]
        public EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviderId? IdentityProviderId { get; set; }

        /// <summary>
        /// Gets or Sets IdentityProviderStatus
        /// </summary>
        [DataMember(Name = "identityProviderStatus", EmitDefaultValue = false)]
        public EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviderStatus? IdentityProviderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviders" /> class.
        /// </summary>
        /// <param name="identityProviderId">identityProviderId.</param>
        /// <param name="identityProviderStatus">identityProviderStatus.</param>
        /// <param name="enableMfa">enableMfa.</param>
        /// <param name="enforceMfa">enforceMfa.</param>
        public EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviders(EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviderId? identityProviderId = default(EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviderId?), EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviderStatus? identityProviderStatus = default(EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviderStatus?), bool enableMfa = default(bool), string enforceMfa = default(string))
        {
            this.IdentityProviderId = identityProviderId;
            this.IdentityProviderStatus = identityProviderStatus;
            this.EnableMfa = enableMfa;
            this.EnforceMfa = enforceMfa;
        }

        /// <summary>
        /// Gets or Sets EnableMfa
        /// </summary>
        [DataMember(Name = "enableMfa", EmitDefaultValue = true)]
        public bool EnableMfa { get; set; }

        /// <summary>
        /// Gets or Sets EnforceMfa
        /// </summary>
        [DataMember(Name = "enforceMfa", EmitDefaultValue = true)]
        public string EnforceMfa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsTenantsTenantIdentityProviders {\n");
            sb.Append("  IdentityProviderId: ").Append(IdentityProviderId).Append("\n");
            sb.Append("  IdentityProviderStatus: ").Append(IdentityProviderStatus).Append("\n");
            sb.Append("  EnableMfa: ").Append(EnableMfa).Append("\n");
            sb.Append("  EnforceMfa: ").Append(EnforceMfa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
