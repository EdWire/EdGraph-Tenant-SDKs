/*
 * Tenant Api
 *
 * Tenant Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.Tenant.Client.Client.OpenAPIDateConverter;

namespace EdGraph.Tenant.Client.Model
{
    /// <summary>
    /// IdentityApiApiClientV1ApiClientProfileResponse
    /// </summary>
    [DataContract(Name = "IdentityApi.ApiClient.V1.ApiClientProfileResponse")]
    public partial class IdentityApiApiClientV1ApiClientProfileResponse : IEquatable<IdentityApiApiClientV1ApiClientProfileResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AccessTokenType
        /// </summary>
        [DataMember(Name = "accessTokenType", EmitDefaultValue = false)]
        public IdentityApiApiClientV1AccessTokenType? AccessTokenType { get; set; }

        /// <summary>
        /// Gets or Sets TokenUsage
        /// </summary>
        [DataMember(Name = "tokenUsage", EmitDefaultValue = false)]
        public IdentityApiApiClientV1TokenUsage? TokenUsage { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokenExpiration
        /// </summary>
        [DataMember(Name = "refreshTokenExpiration", EmitDefaultValue = false)]
        public IdentityApiApiClientV1TokenExpiration? RefreshTokenExpiration { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityApiApiClientV1ApiClientProfileResponse" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="clientName">clientName.</param>
        /// <param name="description">description.</param>
        /// <param name="clientUri">clientUri.</param>
        /// <param name="logoUri">logoUri.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="accessTokenType">accessTokenType.</param>
        /// <param name="tokenUsage">tokenUsage.</param>
        /// <param name="refreshTokenExpiration">refreshTokenExpiration.</param>
        /// <param name="enableLocalLogin">enableLocalLogin.</param>
        /// <param name="allowOfflineAccess">allowOfflineAccess.</param>
        /// <param name="allowAccessTokensViaBrowser">allowAccessTokensViaBrowser.</param>
        /// <param name="updateAccessTokenClaimsOnRefresh">updateAccessTokenClaimsOnRefresh.</param>
        /// <param name="alwaysIncludeUserClaimsInIdToken">alwaysIncludeUserClaimsInIdToken.</param>
        /// <param name="identityTokenLifetime">identityTokenLifetime.</param>
        /// <param name="accessTokenLifetime">accessTokenLifetime.</param>
        /// <param name="authorizationCodeLifetime">authorizationCodeLifetime.</param>
        /// <param name="absoluteRefreshTokenLifetime">absoluteRefreshTokenLifetime.</param>
        /// <param name="slidingRefreshTokenLifetime">slidingRefreshTokenLifetime.</param>
        /// <param name="requireClientSecret">requireClientSecret.</param>
        /// <param name="requireConsent">requireConsent.</param>
        /// <param name="requirePkce">requirePkce.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="lastModifiedBy">lastModifiedBy.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        public IdentityApiApiClientV1ApiClientProfileResponse(string tenantId = default(string), string clientId = default(string), string clientName = default(string), string description = default(string), string clientUri = default(string), string logoUri = default(string), bool enabled = default(bool), IdentityApiApiClientV1AccessTokenType? accessTokenType = default(IdentityApiApiClientV1AccessTokenType?), IdentityApiApiClientV1TokenUsage? tokenUsage = default(IdentityApiApiClientV1TokenUsage?), IdentityApiApiClientV1TokenExpiration? refreshTokenExpiration = default(IdentityApiApiClientV1TokenExpiration?), bool enableLocalLogin = default(bool), bool allowOfflineAccess = default(bool), bool allowAccessTokensViaBrowser = default(bool), bool updateAccessTokenClaimsOnRefresh = default(bool), bool alwaysIncludeUserClaimsInIdToken = default(bool), int identityTokenLifetime = default(int), int accessTokenLifetime = default(int), int authorizationCodeLifetime = default(int), int absoluteRefreshTokenLifetime = default(int), int slidingRefreshTokenLifetime = default(int), bool requireClientSecret = default(bool), bool requireConsent = default(bool), bool requirePkce = default(bool), string createdBy = default(string), string createdDateTime = default(string), string lastModifiedBy = default(string), string lastModifiedDateTime = default(string))
        {
            this.TenantId = tenantId;
            this.ClientId = clientId;
            this.ClientName = clientName;
            this.Description = description;
            this.ClientUri = clientUri;
            this.LogoUri = logoUri;
            this.Enabled = enabled;
            this.AccessTokenType = accessTokenType;
            this.TokenUsage = tokenUsage;
            this.RefreshTokenExpiration = refreshTokenExpiration;
            this.EnableLocalLogin = enableLocalLogin;
            this.AllowOfflineAccess = allowOfflineAccess;
            this.AllowAccessTokensViaBrowser = allowAccessTokensViaBrowser;
            this.UpdateAccessTokenClaimsOnRefresh = updateAccessTokenClaimsOnRefresh;
            this.AlwaysIncludeUserClaimsInIdToken = alwaysIncludeUserClaimsInIdToken;
            this.IdentityTokenLifetime = identityTokenLifetime;
            this.AccessTokenLifetime = accessTokenLifetime;
            this.AuthorizationCodeLifetime = authorizationCodeLifetime;
            this.AbsoluteRefreshTokenLifetime = absoluteRefreshTokenLifetime;
            this.SlidingRefreshTokenLifetime = slidingRefreshTokenLifetime;
            this.RequireClientSecret = requireClientSecret;
            this.RequireConsent = requireConsent;
            this.RequirePkce = requirePkce;
            this.CreatedBy = createdBy;
            this.CreatedDateTime = createdDateTime;
            this.LastModifiedBy = lastModifiedBy;
            this.LastModifiedDateTime = lastModifiedDateTime;
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "clientId", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientName
        /// </summary>
        [DataMember(Name = "clientName", EmitDefaultValue = true)]
        public string ClientName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ClientUri
        /// </summary>
        [DataMember(Name = "clientUri", EmitDefaultValue = true)]
        public string ClientUri { get; set; }

        /// <summary>
        /// Gets or Sets LogoUri
        /// </summary>
        [DataMember(Name = "logoUri", EmitDefaultValue = true)]
        public string LogoUri { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets EnableLocalLogin
        /// </summary>
        [DataMember(Name = "enableLocalLogin", EmitDefaultValue = true)]
        public bool EnableLocalLogin { get; set; }

        /// <summary>
        /// Gets or Sets AllowOfflineAccess
        /// </summary>
        [DataMember(Name = "allowOfflineAccess", EmitDefaultValue = true)]
        public bool AllowOfflineAccess { get; set; }

        /// <summary>
        /// Gets or Sets AllowAccessTokensViaBrowser
        /// </summary>
        [DataMember(Name = "allowAccessTokensViaBrowser", EmitDefaultValue = true)]
        public bool AllowAccessTokensViaBrowser { get; set; }

        /// <summary>
        /// Gets or Sets UpdateAccessTokenClaimsOnRefresh
        /// </summary>
        [DataMember(Name = "updateAccessTokenClaimsOnRefresh", EmitDefaultValue = true)]
        public bool UpdateAccessTokenClaimsOnRefresh { get; set; }

        /// <summary>
        /// Gets or Sets AlwaysIncludeUserClaimsInIdToken
        /// </summary>
        [DataMember(Name = "alwaysIncludeUserClaimsInIdToken", EmitDefaultValue = true)]
        public bool AlwaysIncludeUserClaimsInIdToken { get; set; }

        /// <summary>
        /// Gets or Sets IdentityTokenLifetime
        /// </summary>
        [DataMember(Name = "identityTokenLifetime", EmitDefaultValue = false)]
        public int IdentityTokenLifetime { get; set; }

        /// <summary>
        /// Gets or Sets AccessTokenLifetime
        /// </summary>
        [DataMember(Name = "accessTokenLifetime", EmitDefaultValue = false)]
        public int AccessTokenLifetime { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationCodeLifetime
        /// </summary>
        [DataMember(Name = "authorizationCodeLifetime", EmitDefaultValue = false)]
        public int AuthorizationCodeLifetime { get; set; }

        /// <summary>
        /// Gets or Sets AbsoluteRefreshTokenLifetime
        /// </summary>
        [DataMember(Name = "absoluteRefreshTokenLifetime", EmitDefaultValue = false)]
        public int AbsoluteRefreshTokenLifetime { get; set; }

        /// <summary>
        /// Gets or Sets SlidingRefreshTokenLifetime
        /// </summary>
        [DataMember(Name = "slidingRefreshTokenLifetime", EmitDefaultValue = false)]
        public int SlidingRefreshTokenLifetime { get; set; }

        /// <summary>
        /// Gets or Sets RequireClientSecret
        /// </summary>
        [DataMember(Name = "requireClientSecret", EmitDefaultValue = true)]
        public bool RequireClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets RequireConsent
        /// </summary>
        [DataMember(Name = "requireConsent", EmitDefaultValue = true)]
        public bool RequireConsent { get; set; }

        /// <summary>
        /// Gets or Sets AllowedScopes
        /// </summary>
        [DataMember(Name = "allowedScopes", EmitDefaultValue = true)]
        public List<string> AllowedScopes { get; private set; }

        /// <summary>
        /// Returns false as AllowedScopes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllowedScopes()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AllowedCorsOrigins
        /// </summary>
        [DataMember(Name = "allowedCorsOrigins", EmitDefaultValue = true)]
        public List<string> AllowedCorsOrigins { get; private set; }

        /// <summary>
        /// Returns false as AllowedCorsOrigins should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllowedCorsOrigins()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AllowedGrantTypes
        /// </summary>
        [DataMember(Name = "allowedGrantTypes", EmitDefaultValue = true)]
        public List<string> AllowedGrantTypes { get; private set; }

        /// <summary>
        /// Returns false as AllowedGrantTypes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllowedGrantTypes()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IdentityProviderRestrictions
        /// </summary>
        [DataMember(Name = "identityProviderRestrictions", EmitDefaultValue = true)]
        public List<string> IdentityProviderRestrictions { get; private set; }

        /// <summary>
        /// Returns false as IdentityProviderRestrictions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIdentityProviderRestrictions()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RedirectUris
        /// </summary>
        [DataMember(Name = "redirectUris", EmitDefaultValue = true)]
        public List<string> RedirectUris { get; private set; }

        /// <summary>
        /// Returns false as RedirectUris should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedirectUris()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PostLogoutRedirectUris
        /// </summary>
        [DataMember(Name = "postLogoutRedirectUris", EmitDefaultValue = true)]
        public List<string> PostLogoutRedirectUris { get; private set; }

        /// <summary>
        /// Returns false as PostLogoutRedirectUris should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePostLogoutRedirectUris()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Claims
        /// </summary>
        [DataMember(Name = "claims", EmitDefaultValue = true)]
        public List<IdentityApiApiClientV1Claim> Claims { get; private set; }

        /// <summary>
        /// Returns false as Claims should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClaims()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RequirePkce
        /// </summary>
        [DataMember(Name = "requirePkce", EmitDefaultValue = true)]
        public bool RequirePkce { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name = "createdDateTime", EmitDefaultValue = true)]
        public string CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedBy
        /// </summary>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = true)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name = "lastModifiedDateTime", EmitDefaultValue = true)]
        public string LastModifiedDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityApiApiClientV1ApiClientProfileResponse {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ClientUri: ").Append(ClientUri).Append("\n");
            sb.Append("  LogoUri: ").Append(LogoUri).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  AccessTokenType: ").Append(AccessTokenType).Append("\n");
            sb.Append("  TokenUsage: ").Append(TokenUsage).Append("\n");
            sb.Append("  RefreshTokenExpiration: ").Append(RefreshTokenExpiration).Append("\n");
            sb.Append("  EnableLocalLogin: ").Append(EnableLocalLogin).Append("\n");
            sb.Append("  AllowOfflineAccess: ").Append(AllowOfflineAccess).Append("\n");
            sb.Append("  AllowAccessTokensViaBrowser: ").Append(AllowAccessTokensViaBrowser).Append("\n");
            sb.Append("  UpdateAccessTokenClaimsOnRefresh: ").Append(UpdateAccessTokenClaimsOnRefresh).Append("\n");
            sb.Append("  AlwaysIncludeUserClaimsInIdToken: ").Append(AlwaysIncludeUserClaimsInIdToken).Append("\n");
            sb.Append("  IdentityTokenLifetime: ").Append(IdentityTokenLifetime).Append("\n");
            sb.Append("  AccessTokenLifetime: ").Append(AccessTokenLifetime).Append("\n");
            sb.Append("  AuthorizationCodeLifetime: ").Append(AuthorizationCodeLifetime).Append("\n");
            sb.Append("  AbsoluteRefreshTokenLifetime: ").Append(AbsoluteRefreshTokenLifetime).Append("\n");
            sb.Append("  SlidingRefreshTokenLifetime: ").Append(SlidingRefreshTokenLifetime).Append("\n");
            sb.Append("  RequireClientSecret: ").Append(RequireClientSecret).Append("\n");
            sb.Append("  RequireConsent: ").Append(RequireConsent).Append("\n");
            sb.Append("  AllowedScopes: ").Append(AllowedScopes).Append("\n");
            sb.Append("  AllowedCorsOrigins: ").Append(AllowedCorsOrigins).Append("\n");
            sb.Append("  AllowedGrantTypes: ").Append(AllowedGrantTypes).Append("\n");
            sb.Append("  IdentityProviderRestrictions: ").Append(IdentityProviderRestrictions).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  PostLogoutRedirectUris: ").Append(PostLogoutRedirectUris).Append("\n");
            sb.Append("  Claims: ").Append(Claims).Append("\n");
            sb.Append("  RequirePkce: ").Append(RequirePkce).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityApiApiClientV1ApiClientProfileResponse);
        }

        /// <summary>
        /// Returns true if IdentityApiApiClientV1ApiClientProfileResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityApiApiClientV1ApiClientProfileResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityApiApiClientV1ApiClientProfileResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ClientUri == input.ClientUri ||
                    (this.ClientUri != null &&
                    this.ClientUri.Equals(input.ClientUri))
                ) && 
                (
                    this.LogoUri == input.LogoUri ||
                    (this.LogoUri != null &&
                    this.LogoUri.Equals(input.LogoUri))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.AccessTokenType == input.AccessTokenType ||
                    this.AccessTokenType.Equals(input.AccessTokenType)
                ) && 
                (
                    this.TokenUsage == input.TokenUsage ||
                    this.TokenUsage.Equals(input.TokenUsage)
                ) && 
                (
                    this.RefreshTokenExpiration == input.RefreshTokenExpiration ||
                    this.RefreshTokenExpiration.Equals(input.RefreshTokenExpiration)
                ) && 
                (
                    this.EnableLocalLogin == input.EnableLocalLogin ||
                    this.EnableLocalLogin.Equals(input.EnableLocalLogin)
                ) && 
                (
                    this.AllowOfflineAccess == input.AllowOfflineAccess ||
                    this.AllowOfflineAccess.Equals(input.AllowOfflineAccess)
                ) && 
                (
                    this.AllowAccessTokensViaBrowser == input.AllowAccessTokensViaBrowser ||
                    this.AllowAccessTokensViaBrowser.Equals(input.AllowAccessTokensViaBrowser)
                ) && 
                (
                    this.UpdateAccessTokenClaimsOnRefresh == input.UpdateAccessTokenClaimsOnRefresh ||
                    this.UpdateAccessTokenClaimsOnRefresh.Equals(input.UpdateAccessTokenClaimsOnRefresh)
                ) && 
                (
                    this.AlwaysIncludeUserClaimsInIdToken == input.AlwaysIncludeUserClaimsInIdToken ||
                    this.AlwaysIncludeUserClaimsInIdToken.Equals(input.AlwaysIncludeUserClaimsInIdToken)
                ) && 
                (
                    this.IdentityTokenLifetime == input.IdentityTokenLifetime ||
                    this.IdentityTokenLifetime.Equals(input.IdentityTokenLifetime)
                ) && 
                (
                    this.AccessTokenLifetime == input.AccessTokenLifetime ||
                    this.AccessTokenLifetime.Equals(input.AccessTokenLifetime)
                ) && 
                (
                    this.AuthorizationCodeLifetime == input.AuthorizationCodeLifetime ||
                    this.AuthorizationCodeLifetime.Equals(input.AuthorizationCodeLifetime)
                ) && 
                (
                    this.AbsoluteRefreshTokenLifetime == input.AbsoluteRefreshTokenLifetime ||
                    this.AbsoluteRefreshTokenLifetime.Equals(input.AbsoluteRefreshTokenLifetime)
                ) && 
                (
                    this.SlidingRefreshTokenLifetime == input.SlidingRefreshTokenLifetime ||
                    this.SlidingRefreshTokenLifetime.Equals(input.SlidingRefreshTokenLifetime)
                ) && 
                (
                    this.RequireClientSecret == input.RequireClientSecret ||
                    this.RequireClientSecret.Equals(input.RequireClientSecret)
                ) && 
                (
                    this.RequireConsent == input.RequireConsent ||
                    this.RequireConsent.Equals(input.RequireConsent)
                ) && 
                (
                    this.AllowedScopes == input.AllowedScopes ||
                    this.AllowedScopes != null &&
                    input.AllowedScopes != null &&
                    this.AllowedScopes.SequenceEqual(input.AllowedScopes)
                ) && 
                (
                    this.AllowedCorsOrigins == input.AllowedCorsOrigins ||
                    this.AllowedCorsOrigins != null &&
                    input.AllowedCorsOrigins != null &&
                    this.AllowedCorsOrigins.SequenceEqual(input.AllowedCorsOrigins)
                ) && 
                (
                    this.AllowedGrantTypes == input.AllowedGrantTypes ||
                    this.AllowedGrantTypes != null &&
                    input.AllowedGrantTypes != null &&
                    this.AllowedGrantTypes.SequenceEqual(input.AllowedGrantTypes)
                ) && 
                (
                    this.IdentityProviderRestrictions == input.IdentityProviderRestrictions ||
                    this.IdentityProviderRestrictions != null &&
                    input.IdentityProviderRestrictions != null &&
                    this.IdentityProviderRestrictions.SequenceEqual(input.IdentityProviderRestrictions)
                ) && 
                (
                    this.RedirectUris == input.RedirectUris ||
                    this.RedirectUris != null &&
                    input.RedirectUris != null &&
                    this.RedirectUris.SequenceEqual(input.RedirectUris)
                ) && 
                (
                    this.PostLogoutRedirectUris == input.PostLogoutRedirectUris ||
                    this.PostLogoutRedirectUris != null &&
                    input.PostLogoutRedirectUris != null &&
                    this.PostLogoutRedirectUris.SequenceEqual(input.PostLogoutRedirectUris)
                ) && 
                (
                    this.Claims == input.Claims ||
                    this.Claims != null &&
                    input.Claims != null &&
                    this.Claims.SequenceEqual(input.Claims)
                ) && 
                (
                    this.RequirePkce == input.RequirePkce ||
                    this.RequirePkce.Equals(input.RequirePkce)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantId != null)
                {
                    hashCode = (hashCode * 59) + this.TenantId.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientName != null)
                {
                    hashCode = (hashCode * 59) + this.ClientName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ClientUri != null)
                {
                    hashCode = (hashCode * 59) + this.ClientUri.GetHashCode();
                }
                if (this.LogoUri != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessTokenType.GetHashCode();
                hashCode = (hashCode * 59) + this.TokenUsage.GetHashCode();
                hashCode = (hashCode * 59) + this.RefreshTokenExpiration.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableLocalLogin.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowOfflineAccess.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowAccessTokensViaBrowser.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdateAccessTokenClaimsOnRefresh.GetHashCode();
                hashCode = (hashCode * 59) + this.AlwaysIncludeUserClaimsInIdToken.GetHashCode();
                hashCode = (hashCode * 59) + this.IdentityTokenLifetime.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessTokenLifetime.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthorizationCodeLifetime.GetHashCode();
                hashCode = (hashCode * 59) + this.AbsoluteRefreshTokenLifetime.GetHashCode();
                hashCode = (hashCode * 59) + this.SlidingRefreshTokenLifetime.GetHashCode();
                hashCode = (hashCode * 59) + this.RequireClientSecret.GetHashCode();
                hashCode = (hashCode * 59) + this.RequireConsent.GetHashCode();
                if (this.AllowedScopes != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedScopes.GetHashCode();
                }
                if (this.AllowedCorsOrigins != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedCorsOrigins.GetHashCode();
                }
                if (this.AllowedGrantTypes != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedGrantTypes.GetHashCode();
                }
                if (this.IdentityProviderRestrictions != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityProviderRestrictions.GetHashCode();
                }
                if (this.RedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUris.GetHashCode();
                }
                if (this.PostLogoutRedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.PostLogoutRedirectUris.GetHashCode();
                }
                if (this.Claims != null)
                {
                    hashCode = (hashCode * 59) + this.Claims.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequirePkce.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDateTime.GetHashCode();
                }
                if (this.LastModifiedBy != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedBy.GetHashCode();
                }
                if (this.LastModifiedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
