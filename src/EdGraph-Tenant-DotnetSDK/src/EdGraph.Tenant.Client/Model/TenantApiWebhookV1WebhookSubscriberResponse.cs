/*
 * Tenant Api
 *
 * Tenant Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.Tenant.Client.Client.OpenAPIDateConverter;

namespace EdGraph.Tenant.Client.Model
{
    /// <summary>
    /// Webhook Subscribers
    /// </summary>
    [DataContract(Name = "TenantApi.Webhook.V1.WebhookSubscriberResponse")]
    public partial class TenantApiWebhookV1WebhookSubscriberResponse : IEquatable<TenantApiWebhookV1WebhookSubscriberResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantApiWebhookV1WebhookSubscriberResponse" /> class.
        /// </summary>
        /// <param name="eventName">eventName.</param>
        /// <param name="eventVersion">eventVersion.</param>
        /// <param name="eventSchema">eventSchema.</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="scope">scope.</param>
        public TenantApiWebhookV1WebhookSubscriberResponse(string eventName = default(string), string eventVersion = default(string), string eventSchema = default(string), string groupName = default(string), string scope = default(string))
        {
            this.EventName = eventName;
            this.EventVersion = eventVersion;
            this.EventSchema = eventSchema;
            this.GroupName = groupName;
            this.Scope = scope;
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name = "eventName", EmitDefaultValue = true)]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or Sets EventVersion
        /// </summary>
        [DataMember(Name = "eventVersion", EmitDefaultValue = true)]
        public string EventVersion { get; set; }

        /// <summary>
        /// Gets or Sets EventSchema
        /// </summary>
        [DataMember(Name = "eventSchema", EmitDefaultValue = true)]
        public string EventSchema { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "groupName", EmitDefaultValue = true)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TenantApiWebhookV1WebhookSubscriberResponse {\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventVersion: ").Append(EventVersion).Append("\n");
            sb.Append("  EventSchema: ").Append(EventSchema).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantApiWebhookV1WebhookSubscriberResponse);
        }

        /// <summary>
        /// Returns true if TenantApiWebhookV1WebhookSubscriberResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantApiWebhookV1WebhookSubscriberResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantApiWebhookV1WebhookSubscriberResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.EventVersion == input.EventVersion ||
                    (this.EventVersion != null &&
                    this.EventVersion.Equals(input.EventVersion))
                ) && 
                (
                    this.EventSchema == input.EventSchema ||
                    (this.EventSchema != null &&
                    this.EventSchema.Equals(input.EventSchema))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventName != null)
                {
                    hashCode = (hashCode * 59) + this.EventName.GetHashCode();
                }
                if (this.EventVersion != null)
                {
                    hashCode = (hashCode * 59) + this.EventVersion.GetHashCode();
                }
                if (this.EventSchema != null)
                {
                    hashCode = (hashCode * 59) + this.EventSchema.GetHashCode();
                }
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
