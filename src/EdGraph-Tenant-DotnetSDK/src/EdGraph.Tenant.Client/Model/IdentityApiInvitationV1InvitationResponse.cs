/*
 * Tenant Api
 *
 * Tenant Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.Tenant.Client.Client.OpenAPIDateConverter;

namespace EdGraph.Tenant.Client.Model
{
    /// <summary>
    /// IdentityApiInvitationV1InvitationResponse
    /// </summary>
    [DataContract(Name = "IdentityApi.Invitation.V1.InvitationResponse")]
    public partial class IdentityApiInvitationV1InvitationResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets InvitationStatus
        /// </summary>
        [DataMember(Name = "invitationStatus", EmitDefaultValue = false)]
        public IdentityApiInvitationV1InvitationStatus? InvitationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityApiInvitationV1InvitationResponse" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="invitationId">invitationId.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="email">email.</param>
        /// <param name="role">role.</param>
        /// <param name="invitationToken">invitationToken.</param>
        /// <param name="invitationStatus">invitationStatus.</param>
        /// <param name="invitationSentDateTime">invitationSentDateTime.</param>
        public IdentityApiInvitationV1InvitationResponse(string tenantId = default(string), string invitationId = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), string role = default(string), string invitationToken = default(string), IdentityApiInvitationV1InvitationStatus? invitationStatus = default(IdentityApiInvitationV1InvitationStatus?), string invitationSentDateTime = default(string))
        {
            this.TenantId = tenantId;
            this.InvitationId = invitationId;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Email = email;
            this.Role = role;
            this.InvitationToken = invitationToken;
            this.InvitationStatus = invitationStatus;
            this.InvitationSentDateTime = invitationSentDateTime;
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets InvitationId
        /// </summary>
        [DataMember(Name = "invitationId", EmitDefaultValue = true)]
        public string InvitationId { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = true)]
        public string Role { get; set; }

        /// <summary>
        /// Gets or Sets InvitationToken
        /// </summary>
        [DataMember(Name = "invitationToken", EmitDefaultValue = true)]
        public string InvitationToken { get; set; }

        /// <summary>
        /// Gets or Sets InvitationSentDateTime
        /// </summary>
        [DataMember(Name = "invitationSentDateTime", EmitDefaultValue = true)]
        public string InvitationSentDateTime { get; set; }

        /// <summary>
        /// Gets or Sets AssignLicenseRequests
        /// </summary>
        [DataMember(Name = "assignLicenseRequests", EmitDefaultValue = true)]
        public List<IdentityApiInvitationV1AssignLicenseRequest> AssignLicenseRequests { get; private set; }

        /// <summary>
        /// Returns false as AssignLicenseRequests should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAssignLicenseRequests()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityApiInvitationV1InvitationResponse {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  InvitationId: ").Append(InvitationId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  InvitationToken: ").Append(InvitationToken).Append("\n");
            sb.Append("  InvitationStatus: ").Append(InvitationStatus).Append("\n");
            sb.Append("  InvitationSentDateTime: ").Append(InvitationSentDateTime).Append("\n");
            sb.Append("  AssignLicenseRequests: ").Append(AssignLicenseRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
