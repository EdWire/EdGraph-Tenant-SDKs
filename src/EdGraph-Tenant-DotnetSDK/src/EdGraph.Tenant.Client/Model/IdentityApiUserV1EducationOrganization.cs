/*
 * Tenant Api
 *
 * Tenant Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.Tenant.Client.Client.OpenAPIDateConverter;

namespace EdGraph.Tenant.Client.Model
{
    /// <summary>
    /// IdentityApiUserV1EducationOrganization
    /// </summary>
    [DataContract(Name = "IdentityApi.User.V1.EducationOrganization")]
    public partial class IdentityApiUserV1EducationOrganization : IEquatable<IdentityApiUserV1EducationOrganization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityApiUserV1EducationOrganization" /> class.
        /// </summary>
        /// <param name="educationOrganizationId">educationOrganizationId.</param>
        /// <param name="educationOrganizationName">educationOrganizationName.</param>
        /// <param name="staffClassification">staffClassification.</param>
        public IdentityApiUserV1EducationOrganization(int educationOrganizationId = default(int), string educationOrganizationName = default(string), string staffClassification = default(string))
        {
            this.EducationOrganizationId = educationOrganizationId;
            this.EducationOrganizationName = educationOrganizationName;
            this.StaffClassification = staffClassification;
        }

        /// <summary>
        /// Gets or Sets EducationOrganizationId
        /// </summary>
        [DataMember(Name = "educationOrganizationId", EmitDefaultValue = false)]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationName
        /// </summary>
        [DataMember(Name = "educationOrganizationName", EmitDefaultValue = true)]
        public string EducationOrganizationName { get; set; }

        /// <summary>
        /// Gets or Sets StaffClassification
        /// </summary>
        [DataMember(Name = "staffClassification", EmitDefaultValue = true)]
        public string StaffClassification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityApiUserV1EducationOrganization {\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  EducationOrganizationName: ").Append(EducationOrganizationName).Append("\n");
            sb.Append("  StaffClassification: ").Append(StaffClassification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityApiUserV1EducationOrganization);
        }

        /// <summary>
        /// Returns true if IdentityApiUserV1EducationOrganization instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityApiUserV1EducationOrganization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityApiUserV1EducationOrganization input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EducationOrganizationId == input.EducationOrganizationId ||
                    this.EducationOrganizationId.Equals(input.EducationOrganizationId)
                ) && 
                (
                    this.EducationOrganizationName == input.EducationOrganizationName ||
                    (this.EducationOrganizationName != null &&
                    this.EducationOrganizationName.Equals(input.EducationOrganizationName))
                ) && 
                (
                    this.StaffClassification == input.StaffClassification ||
                    (this.StaffClassification != null &&
                    this.StaffClassification.Equals(input.StaffClassification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EducationOrganizationId.GetHashCode();
                if (this.EducationOrganizationName != null)
                {
                    hashCode = (hashCode * 59) + this.EducationOrganizationName.GetHashCode();
                }
                if (this.StaffClassification != null)
                {
                    hashCode = (hashCode * 59) + this.StaffClassification.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
