/*
 * Tenant Api
 *
 * Tenant Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.Tenant.Client.Client.OpenAPIDateConverter;

namespace EdGraph.Tenant.Client.Model
{
    /// <summary>
    /// TenantApiTenantV1InstanceOdsDatabase
    /// </summary>
    [DataContract(Name = "TenantApi.Tenant.V1.InstanceOdsDatabase")]
    public partial class TenantApiTenantV1InstanceOdsDatabase : IEquatable<TenantApiTenantV1InstanceOdsDatabase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantApiTenantV1InstanceOdsDatabase" /> class.
        /// </summary>
        /// <param name="selectedTierId">selectedTierId.</param>
        /// <param name="selectedTierName">selectedTierName.</param>
        /// <param name="status">status.</param>
        /// <param name="jobs">jobs.</param>
        /// <param name="year">year.</param>
        /// <param name="odsBackupCode">odsBackupCode.</param>
        /// <param name="odsBackupDescription">odsBackupDescription.</param>
        public TenantApiTenantV1InstanceOdsDatabase(string selectedTierId = default(string), string selectedTierName = default(string), string status = default(string), TenantApiTenantV1InstanceDatabaseJobs jobs = default(TenantApiTenantV1InstanceDatabaseJobs), int year = default(int), string odsBackupCode = default(string), string odsBackupDescription = default(string))
        {
            this.SelectedTierId = selectedTierId;
            this.SelectedTierName = selectedTierName;
            this.Status = status;
            this.Jobs = jobs;
            this.Year = year;
            this.OdsBackupCode = odsBackupCode;
            this.OdsBackupDescription = odsBackupDescription;
        }

        /// <summary>
        /// Gets or Sets SelectedTierId
        /// </summary>
        [DataMember(Name = "selectedTierId", EmitDefaultValue = true)]
        public string SelectedTierId { get; set; }

        /// <summary>
        /// Gets or Sets SelectedTierName
        /// </summary>
        [DataMember(Name = "selectedTierName", EmitDefaultValue = true)]
        public string SelectedTierName { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Jobs
        /// </summary>
        [DataMember(Name = "jobs", EmitDefaultValue = false)]
        public TenantApiTenantV1InstanceDatabaseJobs Jobs { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets OdsBackupCode
        /// </summary>
        [DataMember(Name = "odsBackupCode", EmitDefaultValue = true)]
        public string OdsBackupCode { get; set; }

        /// <summary>
        /// Gets or Sets OdsBackupDescription
        /// </summary>
        [DataMember(Name = "odsBackupDescription", EmitDefaultValue = true)]
        public string OdsBackupDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TenantApiTenantV1InstanceOdsDatabase {\n");
            sb.Append("  SelectedTierId: ").Append(SelectedTierId).Append("\n");
            sb.Append("  SelectedTierName: ").Append(SelectedTierName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Jobs: ").Append(Jobs).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  OdsBackupCode: ").Append(OdsBackupCode).Append("\n");
            sb.Append("  OdsBackupDescription: ").Append(OdsBackupDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantApiTenantV1InstanceOdsDatabase);
        }

        /// <summary>
        /// Returns true if TenantApiTenantV1InstanceOdsDatabase instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantApiTenantV1InstanceOdsDatabase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantApiTenantV1InstanceOdsDatabase input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SelectedTierId == input.SelectedTierId ||
                    (this.SelectedTierId != null &&
                    this.SelectedTierId.Equals(input.SelectedTierId))
                ) && 
                (
                    this.SelectedTierName == input.SelectedTierName ||
                    (this.SelectedTierName != null &&
                    this.SelectedTierName.Equals(input.SelectedTierName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Jobs == input.Jobs ||
                    (this.Jobs != null &&
                    this.Jobs.Equals(input.Jobs))
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.OdsBackupCode == input.OdsBackupCode ||
                    (this.OdsBackupCode != null &&
                    this.OdsBackupCode.Equals(input.OdsBackupCode))
                ) && 
                (
                    this.OdsBackupDescription == input.OdsBackupDescription ||
                    (this.OdsBackupDescription != null &&
                    this.OdsBackupDescription.Equals(input.OdsBackupDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SelectedTierId != null)
                {
                    hashCode = (hashCode * 59) + this.SelectedTierId.GetHashCode();
                }
                if (this.SelectedTierName != null)
                {
                    hashCode = (hashCode * 59) + this.SelectedTierName.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Jobs != null)
                {
                    hashCode = (hashCode * 59) + this.Jobs.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Year.GetHashCode();
                if (this.OdsBackupCode != null)
                {
                    hashCode = (hashCode * 59) + this.OdsBackupCode.GetHashCode();
                }
                if (this.OdsBackupDescription != null)
                {
                    hashCode = (hashCode * 59) + this.OdsBackupDescription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
