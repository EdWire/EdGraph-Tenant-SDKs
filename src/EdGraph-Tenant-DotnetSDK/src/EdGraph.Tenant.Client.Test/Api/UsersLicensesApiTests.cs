/*
 * Tenant Api
 *
 * Tenant Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EdGraph.Tenant.Client.Client;
using EdGraph.Tenant.Client.Api;
// uncomment below to import models
//using EdGraph.Tenant.Client.Model;

namespace EdGraph.Tenant.Client.Test.Api
{
    /// <summary>
    ///  Class for testing UsersLicensesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersLicensesApiTests : IDisposable
    {
        private UsersLicensesApi instance;

        public UsersLicensesApiTests()
        {
            instance = new UsersLicensesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersLicensesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UsersLicensesApi
            //Assert.IsType<UsersLicensesApi>(instance);
        }

        /// <summary>
        /// Test AssignLicenseTenantUserAsync
        /// </summary>
        [Fact]
        public void AssignLicenseTenantUserAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string userId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsLicensesAssignLicenseRequest? edGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsLicensesAssignLicenseRequest = null;
            //var response = instance.AssignLicenseTenantUserAsync(tenantId, userId, apiVersion, xVersion, edGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsLicensesAssignLicenseRequest);
            //Assert.IsType<IdentityApiUserV1LicenseAssignedResponse>(response);
        }

        /// <summary>
        /// Test AssignLicenseTenantUserBulkAsync
        /// </summary>
        [Fact]
        public void AssignLicenseTenantUserBulkAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string userId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsLicensesAssignLicenseBulkRequest? edGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsLicensesAssignLicenseBulkRequest = null;
            //var response = instance.AssignLicenseTenantUserBulkAsync(tenantId, userId, apiVersion, xVersion, edGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsLicensesAssignLicenseBulkRequest);
            //Assert.IsType<IdentityApiUserV1LicenseAssignedBulkResponse>(response);
        }

        /// <summary>
        /// Test GetAllTenantUserApplicationLicensesAsync
        /// </summary>
        [Fact]
        public void GetAllTenantUserApplicationLicensesAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string userId = null;
            //int? pageSize = null;
            //int? pageIndex = null;
            //string? orderBy = null;
            //string? filter = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetAllTenantUserApplicationLicensesAsync(tenantId, userId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            //Assert.IsType<EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserLicensePaginatedItemsViewModel>(response);
        }

        /// <summary>
        /// Test RevokeLicenseTenantUserAsync
        /// </summary>
        [Fact]
        public void RevokeLicenseTenantUserAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string userId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //IdentityApiUserV1RevokeLicenseRequest? identityApiUserV1RevokeLicenseRequest = null;
            //var response = instance.RevokeLicenseTenantUserAsync(tenantId, userId, apiVersion, xVersion, identityApiUserV1RevokeLicenseRequest);
            //Assert.IsType<IdentityApiUserV1LicenseRevokedResponse>(response);
        }

        /// <summary>
        /// Test RevokeLicenseTenantUserBulkAsync
        /// </summary>
        [Fact]
        public void RevokeLicenseTenantUserBulkAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string userId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsLicensesRevokeLicenseBulkRequest? edGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsLicensesRevokeLicenseBulkRequest = null;
            //var response = instance.RevokeLicenseTenantUserBulkAsync(tenantId, userId, apiVersion, xVersion, edGraphHttpAggregatorsTenantApiControllersV1ViewModelsRequestsLicensesRevokeLicenseBulkRequest);
            //Assert.IsType<IdentityApiUserV1LicenseRevokedBulkResponse>(response);
        }
    }
}
