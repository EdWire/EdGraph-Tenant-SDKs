/*
 * Tenant Api
 *
 * Tenant Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EdGraph.Tenant.Client.Client;
using EdGraph.Tenant.Client.Api;
// uncomment below to import models
//using EdGraph.Tenant.Client.Model;

namespace EdGraph.Tenant.Client.Test.Api
{
    /// <summary>
    ///  Class for testing DomainsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DomainsApiTests : IDisposable
    {
        private DomainsApi instance;

        public DomainsApiTests()
        {
            instance = new DomainsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DomainsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DomainsApi
            //Assert.IsType<DomainsApi>(instance);
        }

        /// <summary>
        /// Test CreateTenantDomainAsync
        /// </summary>
        [Fact]
        public void CreateTenantDomainAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1CreateDomainRequest? tenantApiTenantV1CreateDomainRequest = null;
            //var response = instance.CreateTenantDomainAsync(tenantId, apiVersion, xVersion, tenantApiTenantV1CreateDomainRequest);
            //Assert.IsType<TenantApiTenantV1DomainCreatedResponse>(response);
        }

        /// <summary>
        /// Test DeleteTenantDomainAsync
        /// </summary>
        [Fact]
        public void DeleteTenantDomainAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string domainName = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //instance.DeleteTenantDomainAsync(tenantId, domainName, apiVersion, xVersion);
        }

        /// <summary>
        /// Test GetAllTenantDomainsAsync
        /// </summary>
        [Fact]
        public void GetAllTenantDomainsAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //int? pageSize = null;
            //int? pageIndex = null;
            //string? orderBy = null;
            //string? filter = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetAllTenantDomainsAsync(tenantId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            //Assert.IsType<EdGraphHttpAggregatorsTenantApiControllersV1ViewModelsResponsesDomainListResponseDtoPaginatedItemsViewModel>(response);
        }

        /// <summary>
        /// Test GetTenantDomainProfileByNameAsync
        /// </summary>
        [Fact]
        public void GetTenantDomainProfileByNameAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string domainName = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetTenantDomainProfileByNameAsync(tenantId, domainName, apiVersion, xVersion);
            //Assert.IsType<TenantApiTenantV1DomainProfileResponse>(response);
        }

        /// <summary>
        /// Test UpdateTenantDomainAsync
        /// </summary>
        [Fact]
        public void UpdateTenantDomainAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string domainName = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1UpdateDomainRequest? tenantApiTenantV1UpdateDomainRequest = null;
            //var response = instance.UpdateTenantDomainAsync(tenantId, domainName, apiVersion, xVersion, tenantApiTenantV1UpdateDomainRequest);
            //Assert.IsType<TenantApiTenantV1DomainUpdatedResponse>(response);
        }

        /// <summary>
        /// Test VerifyTenantDomainAsync
        /// </summary>
        [Fact]
        public void VerifyTenantDomainAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string domainName = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1VerifyDomainRequest? tenantApiTenantV1VerifyDomainRequest = null;
            //var response = instance.VerifyTenantDomainAsync(tenantId, domainName, apiVersion, xVersion, tenantApiTenantV1VerifyDomainRequest);
            //Assert.IsType<TenantApiTenantV1DomainVerifiedResponse>(response);
        }
    }
}
