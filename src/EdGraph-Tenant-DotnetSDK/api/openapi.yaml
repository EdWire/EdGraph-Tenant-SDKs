openapi: 3.0.1
info:
  description: Tenant Api - v1.0
  title: Tenant Api
  version: v1.0
servers:
- url: https://api.edgraph.com/tenant
security:
- oauth2:
  - https://api.edgraph.com/tenant
paths:
  /tenants/{tenantId}/apiclients/{clientId}/regeneratesecret:
    put:
      operationId: RegenerateTenantApiClientSecretAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.RegenerateApiClientSecretRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.RegenerateApiClientSecretRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.RegenerateApiClientSecretRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.RegenerateApiClientSecretRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.ApiClient.V1.ApiClientSecretRegeneratedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Regenerates an OpenId API Client's secret
      tags:
      - API Clients
  /tenants/{tenantId}/apiclients/{clientId}:
    delete:
      operationId: DeleteTenantApiClientAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "204":
          description: The resource was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Deletes an OpenId API Client
      tags:
      - API Clients
    get:
      operationId: GetTenantApiClientByIdAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.ApiClient.V1.ApiClientProfileResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Retrieves an OpenId API Client
      tags:
      - API Clients
    put:
      operationId: UpdateTenantApiClientAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.UpdateApiClientRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.UpdateApiClientRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.UpdateApiClientRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.UpdateApiClientRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.ApiClient.V1.ApiClientUpdatedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Updates an OpenId API Client
      tags:
      - API Clients
  /tenants/{tenantId}/apiclients:
    get:
      operationId: GetAllTenantApiClientsAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: pageIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: filter
        required: false
        schema:
          default: ""
          type: string
        style: form
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.ApiClient.V1.ApiClientPaginatedItemsResponsePaginatedItemsViewModel'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of OpenId API Clients associated to this tenant
      tags:
      - API Clients
    post:
      operationId: CreateTenantApiClientAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.CreateApiClientRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.CreateApiClientRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.CreateApiClientRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.ApiClient.V1.CreateApiClientRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.ApiClient.V1.ApiClientCreatedResponse'
          description: The resource was created. The location of the resource is available
            in the Location header of the response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Creates a new OpenId API Client
      tags:
      - API Clients
  /tenants/{tenantId}/clients/{clientId}/settings:
    get:
      operationId: GetClientSettingsAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.GetAppSettingsResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of a Tenant's ClientSettings.
      tags:
      - Applications / Settings
    post:
      operationId: SetClientSettingsAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.SetAppSettingsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.SetAppSettingsRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.SetAppSettingsRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.SetAppSettingsRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.SetAppSettingsResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Creates/updates a Tenant's ClientSettings.
      tags:
      - Applications / Settings
  /tenants/{tenantId}/clients/{clientId}/settingstypes:
    get:
      operationId: GetClientSettingsTypesAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: pageIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: filter
        required: false
        schema:
          default: ""
          type: string
        style: form
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.ClientSettingsType.V1.GetClientSettingsTypesResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of ClientSettingsTypes.
      tags:
      - Applications / Settings
  /tenants/{tenantId}/applicationtiles:
    get:
      operationId: GetTenantApplicationTilesAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: pageIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 100
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: applicationName ASC
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: filter
        required: false
        schema:
          default: ""
          type: string
        style: form
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.ApplicationTilesResponseWithUserApplicationLicense'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of applications licensed to the user that is currently
        logged in the context of this tenant
      tags:
      - Applications / Tiles
  /tenants/{tenantId}/applications/{applicationId}:
    get:
      operationId: GetTenantApplicationProfileByIdAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationApi.Application.V2.ApplicationProfileResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Retrieves an application
      tags:
      - Applications
  /tenants/{tenantId}/applications:
    get:
      operationId: GetTenantApplicationsAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: pageIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationApi.Application.V2.ApplicationListResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of applications associated to this tenant
      tags:
      - Applications
  /tenants/{tenantId}/invitations/{invitationId}:
    delete:
      operationId: DeleteTenantInvitationAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: invitationId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "204":
          description: The resource was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Deletes an invitation
      tags:
      - Invitations
    get:
      operationId: GetTenantInvitationByIdAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: invitationId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.Invitation.V1.InvitationResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Retrieves a specific invitation
      tags:
      - Invitations
  /tenants/{tenantId}/invitations:
    get:
      operationId: GetAllTenantInvitationsAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: pageIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: filter
        required: false
        schema:
          default: ""
          type: string
        style: form
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.Invitation.V1.InvitationListResponsePaginatedItemsViewModel'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of invitations associated to this tenant
      tags:
      - Invitations
    post:
      operationId: SendTenantInvitationAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.Invitation.V1.SendInvitationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.Invitation.V1.SendInvitationRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.Invitation.V1.SendInvitationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.Invitation.V1.SendInvitationRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.Invitation.V1.InvitationSentResponse'
          description: The resource was created. The location of the resource is available
            in the Location header of the response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Creates and sends an invitation to a user
      tags:
      - Invitations
  /tenants/{tenantId}/onboardingsteps/{stepNumber}:
    put:
      operationId: UpdateOnboardingStepAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: stepNumber
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateOnboardingStepRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateOnboardingStepRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateOnboardingStepRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateOnboardingStepRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantUpdatedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Updates the status of an Onboarding Step.
      tags:
      - OnboardingSteps
  /tenants/{tenantId}/onboardingsteps:
    post:
      operationId: CreateOnboardingStepAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateOnboardingStepRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateOnboardingStepRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateOnboardingStepRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateOnboardingStepRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantUpdatedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Creates an Onboarding Step.
      tags:
      - OnboardingSteps
  /tenants/{tenantId}/organizations/{organizationIdentifier}:
    delete:
      operationId: DeleteOrganizationAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: organizationIdentifier
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.OrganizationDeletedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Deletes an Organization.
      tags:
      - Organizations
    get:
      operationId: GetOrganizationByIdAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: organizationIdentifier
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.Organization'
          description: The requested resource was successfully retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Retrieves an Organization by ID.
      tags:
      - Organizations
    put:
      operationId: UpdateOrganizationAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: organizationIdentifier
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateOrganizationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateOrganizationRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateOrganizationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateOrganizationRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.OrganizationUpdatedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Updates an Organization.
      tags:
      - Organizations
  /tenants/{tenantId}/organizations:
    get:
      operationId: GetOrganizationsAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.GetOrganizationsResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of Organizations.
      tags:
      - Organizations
    post:
      operationId: CreateOrganizationAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateOrganizationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateOrganizationRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateOrganizationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateOrganizationRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.OrganizationCreatedResponse'
          description: The resource was created. The location of the resource is available
            in the Location header of the response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Creates an Organization.
      tags:
      - Organizations
  /tenants/{tenantId}/subscriptions/{subscriptionId}:
    get:
      operationId: GetTenantSubscriptionProfileByIdAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.SubscriptionProfileResponseDto'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Retrieves a subscription
      tags:
      - Subscriptions
    put:
      operationId: UpdateTenantSubscriptionAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateSubscriptionRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateSubscriptionRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateSubscriptionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateSubscriptionRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.SubscriptionUpdatedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Updates a subscription
      tags:
      - Subscriptions
  /tenants/{tenantId}/subscriptions/applications:
    get:
      operationId: GetAllTenantSubscriptionApplications
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: pageIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationApi.Application.V2.PaginatedItemsResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of applications available for subscription.
      tags:
      - Subscriptions
  /tenants/{tenantId}/subscriptions:
    get:
      operationId: GetAllTenantSubscriptionsAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: pageIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: filter
        required: false
        schema:
          default: ""
          type: string
        style: form
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.SubscriptionListResponseDtoPaginatedItemsViewModel'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of subscriptions associated to this tenant
      tags:
      - Subscriptions
    post:
      operationId: CreateTenantSubscriptionAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateSubscriptionRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateSubscriptionRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateSubscriptionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.CreateSubscriptionRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.SubscriptionCreatedResponse'
          description: The resource was created. The location of the resource is available
            in the Location header of the response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Creates a new subscription
      tags:
      - Subscriptions
  /tenants/{tenantId}:
    get:
      operationId: GetTenantByIdAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantProfileResponse'
          description: The requested resource was successfully retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Retrieves the profile of a specific tenant
      tags:
      - Tenants
    put:
      description: "Note: Only the tenant's Identity Providers can be updated at this\
        \ time"
      operationId: UpdateTenantAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateTenantRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateTenantRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateTenantRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Tenant.V1.UpdateTenantRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantUpdatedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Updates a tenant's profile
      tags:
      - Tenants
  /tenants/{tenantId}/users/{userId}/licenses/assignbulk:
    put:
      operationId: AssignLicenseTenantUserBulkAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.AssignLicenseBulkRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.AssignLicenseBulkRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.AssignLicenseBulkRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.AssignLicenseBulkRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.User.V1.LicenseAssignedBulkResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Assigns one or more licenses to a user in the context of a specific
        tenant
      tags:
      - Users - Licenses
  /tenants/{tenantId}/users/{userId}/licenses/assign:
    put:
      operationId: AssignLicenseTenantUserAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.AssignLicenseRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.AssignLicenseRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.AssignLicenseRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.AssignLicenseRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.User.V1.LicenseAssignedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Assigns a license to a user in the context of a specific tenant
      tags:
      - Users - Licenses
  /tenants/{tenantId}/users/{userId}/licenses/revokebulk:
    put:
      operationId: RevokeLicenseTenantUserBulkAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.RevokeLicenseBulkRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.RevokeLicenseBulkRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.RevokeLicenseBulkRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.RevokeLicenseBulkRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.User.V1.LicenseRevokedBulkResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Revokes one or more licenses from a user in the context of a specific
        tenant
      tags:
      - Users - Licenses
  /tenants/{tenantId}/users/{userId}/licenses/revoke:
    put:
      operationId: RevokeLicenseTenantUserAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.RevokeLicenseRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.RevokeLicenseRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.RevokeLicenseRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.RevokeLicenseRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.User.V1.LicenseRevokedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Revokes a license from a user in the context of a specific tenant
      tags:
      - Users - Licenses
  /tenants/{tenantId}/users/{userId}/licenses:
    get:
      operationId: GetAllTenantUserApplicationLicensesAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: pageIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: filter
        required: false
        schema:
          default: ""
          type: string
        style: form
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserLicensePaginatedItemsViewModel'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of user licenses in the context of a specific tenant
      tags:
      - Users - Licenses
  /tenants/{tenantId}/users/{userId}/activate:
    put:
      operationId: ActivateTenantUserAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.ActivateUserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.ActivateUserRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.ActivateUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.ActivateUserRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.User.V1.UserActivatedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Activates a user
      tags:
      - Users
  /tenants/{tenantId}/users/{userId}/deactivate:
    put:
      operationId: DeactivateTenantUserAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.DeactivateUserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.DeactivateUserRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.DeactivateUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.DeactivateUserRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.User.V1.UserDeactivatedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Deactivates a user
      tags:
      - Users
  /tenants/{tenantId}/users/{userId}/resetpassword:
    put:
      description: "Note: This is only applicable to user created in the local identity\
        \ provider."
      operationId: ResetPasswordTenantUserAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.ResetPasswordRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.ResetPasswordRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.ResetPasswordRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.ResetPasswordRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.User.V1.PasswordResettedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Resets a user's password
      tags:
      - Users
  /tenants/{tenantId}/users/{userId}:
    delete:
      operationId: DeleteTenantUserAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "204":
          description: The resource was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Deletes a user
      tags:
      - Users
    get:
      operationId: GetTenantUserProfileByIdAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserProfileResponseWithApplicationLicense'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: The resource could not be found.
      summary: Retrieves a user
      tags:
      - Users
    put:
      operationId: UpdateTenantUserAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.UpdateUserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.UpdateUserRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.UpdateUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.UpdateUserRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.User.V1.UserUpdatedResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Creates or updates a user
      tags:
      - Users
  /tenants/{tenantId}/users:
    get:
      operationId: GetAllTenantUsersAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: pageIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: filter
        required: false
        schema:
          default: ""
          type: string
        style: form
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserListResponseWithApplicationLicensePaginatedItemsViewModel'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of users associated to this tenant
      tags:
      - Users
    post:
      description: "Note: This is only used to create a user in the local identity\
        \ provider, i.e. this cannot be used to create a user in an external identity\
        \ providers such as Microsoft or Google."
      operationId: CreateTenantLocalUserAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.CreateLocalUserRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.CreateLocalUserRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.CreateLocalUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityApi.User.V1.CreateLocalUserRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityApi.User.V1.LocalUserCreatedResponse'
          description: The resource was created. The location of the resource is available
            in the Location header of the response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Creates a user in the local identity provider
      tags:
      - Users
  /tenants/{tenantId}/webhooks/{webhookId}:
    delete:
      operationId: DeleteWebhookAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Webhook.V1.WebhookIdResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Removes a webhook.
      tags:
      - Webhooks
    get:
      operationId: GetWebhookByIdAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Webhook.V1.WebhookResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a webhook by ID.
      tags:
      - Webhooks
    put:
      operationId: UpdateWebhookAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Webhook.V1.UpdateWebhookRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Webhook.V1.UpdateWebhookRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Webhook.V1.UpdateWebhookRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Webhook.V1.UpdateWebhookRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Webhook.V1.WebhookIdResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Updates a webhook
      tags:
      - Webhooks
  /tenants/{tenantId}/webhooks/events:
    get:
      operationId: GetAllWebhookSubscriptionsAsync
      parameters:
      - explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Webhook.V1.WebhookEventsResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request
      tags:
      - Webhooks
  /tenants/{tenantId}/webhooks:
    get:
      operationId: GetAllWebhooksAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: pageIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: filter
        required: false
        schema:
          default: ""
          type: string
        style: form
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Webhook.V1.PaginatedItemsResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Retrieves a list of webhooks.
      tags:
      - Webhooks
    post:
      operationId: CreateWebhookAsync
      parameters:
      - description: ""
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: api-version
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-version
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Webhook.V1.CreateWebhookRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Webhook.V1.CreateWebhookRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantApi.Webhook.V1.CreateWebhookRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantApi.Webhook.V1.CreateWebhookRequest'
        description: ""
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Unauthorized. The request requires authentication. The OAuth
            bearer token was either not provided or is invalid. The operation may
            succeed once authentication has been successfully completed.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: Forbidden. The request cannot be completed in the current authorization
            context. Contact your administrator if you believe this operation should
            be allowed.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdGraph.Common.Errors.Core.ProblemDetails'
          description: An unhandled error occurred on the server.See the response
            body for details.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantApi.Webhook.V1.WebhookIdResponse'
          description: The requested resource was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails'
          description: Bad Request. The request was invalid and cannot be completed.
            See the response body for specific validation errors. This will typically
            be an issue with the query parameters or the request body values.
      summary: Creates a new Webhook
      tags:
      - Webhooks
components:
  schemas:
    ApplicationApi.Application.V2.ApplicationListResponse:
      additionalProperties: false
      example:
        documentationUrl: documentationUrl
        lastModifiedDateTime: lastModifiedDateTime
        roles:
        - isDefault: true
          roleName: roleName
        - isDefault: true
          roleName: roleName
        lastModifiedBy: lastModifiedBy
        groups: groups
        createdDateTime: createdDateTime
        version: version
        tags: tags
        applicationStatus: null
        createdBy: createdBy
        subscriptionType: subscriptionType
        tenantId: tenantId
        applicationId: applicationId
        applicationName: applicationName
      properties:
        tenantId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        applicationName:
          nullable: true
          type: string
        version:
          nullable: true
          type: string
        tags:
          nullable: true
          type: string
        groups:
          nullable: true
          type: string
        applicationStatus:
          $ref: '#/components/schemas/ApplicationApi.Application.V2.ApplicationStatus'
        roles:
          items:
            $ref: '#/components/schemas/ApplicationApi.Application.V2.Role'
          nullable: true
          readOnly: true
          type: array
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
        subscriptionType:
          nullable: true
          type: string
        documentationUrl:
          nullable: true
          type: string
      type: object
    ApplicationApi.Application.V2.ApplicationProfileResponse:
      additionalProperties: false
      example:
        applicationType: null
        lastModifiedDateTime: lastModifiedDateTime
        clientId: clientId
        tooltipText: tooltipText
        roles:
        - isDefault: true
          roleName: roleName
        - isDefault: true
          roleName: roleName
        lastModifiedBy: lastModifiedBy
        groups: groups
        createdDateTime: createdDateTime
        version: version
        tags: tags
        applicationStatus: null
        applicationDescription: applicationDescription
        createdBy: createdBy
        subscriptionType: subscriptionType
        tenantId: tenantId
        applicationUri: applicationUri
        applicationId: applicationId
        applicationName: applicationName
        openInNewWindow: true
      properties:
        tenantId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        applicationType:
          $ref: '#/components/schemas/ApplicationApi.Application.V2.ApplicationType'
        applicationName:
          nullable: true
          type: string
        applicationUri:
          nullable: true
          type: string
        version:
          nullable: true
          type: string
        tooltipText:
          nullable: true
          type: string
        applicationDescription:
          nullable: true
          type: string
        tags:
          nullable: true
          type: string
        groups:
          nullable: true
          type: string
        applicationStatus:
          $ref: '#/components/schemas/ApplicationApi.Application.V2.ApplicationStatus'
        openInNewWindow:
          type: boolean
        roles:
          items:
            $ref: '#/components/schemas/ApplicationApi.Application.V2.Role'
          nullable: true
          readOnly: true
          type: array
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
        subscriptionType:
          nullable: true
          type: string
      type: object
    ApplicationApi.Application.V2.ApplicationStatus:
      enum:
      - Unknown
      - Draft
      - Published
      type: string
    ApplicationApi.Application.V2.ApplicationType:
      enum:
      - Unknown
      - SSO
      - Link
      type: string
    ApplicationApi.Application.V2.PaginatedItemsResponse:
      additionalProperties: false
      example:
        data:
        - documentationUrl: documentationUrl
          lastModifiedDateTime: lastModifiedDateTime
          roles:
          - isDefault: true
            roleName: roleName
          - isDefault: true
            roleName: roleName
          lastModifiedBy: lastModifiedBy
          groups: groups
          createdDateTime: createdDateTime
          version: version
          tags: tags
          applicationStatus: null
          createdBy: createdBy
          subscriptionType: subscriptionType
          tenantId: tenantId
          applicationId: applicationId
          applicationName: applicationName
        - documentationUrl: documentationUrl
          lastModifiedDateTime: lastModifiedDateTime
          roles:
          - isDefault: true
            roleName: roleName
          - isDefault: true
            roleName: roleName
          lastModifiedBy: lastModifiedBy
          groups: groups
          createdDateTime: createdDateTime
          version: version
          tags: tags
          applicationStatus: null
          createdBy: createdBy
          subscriptionType: subscriptionType
          tenantId: tenantId
          applicationId: applicationId
          applicationName: applicationName
        pageIndex: 0
        count: 1
        pageSize: 6
      properties:
        pageIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        count:
          format: int64
          type: integer
        data:
          items:
            $ref: '#/components/schemas/ApplicationApi.Application.V2.ApplicationListResponse'
          nullable: true
          readOnly: true
          type: array
      type: object
    ApplicationApi.Application.V2.Role:
      additionalProperties: false
      example:
        isDefault: true
        roleName: roleName
      properties:
        roleName:
          nullable: true
          type: string
        isDefault:
          type: boolean
      type: object
    EdGraph.Common.Errors.Core.ProblemDetails:
      additionalProperties: false
      properties:
        type:
          nullable: true
          type: string
        status:
          format: int32
          type: integer
        title:
          nullable: true
          type: string
        details:
          nullable: true
          type: string
        instance:
          nullable: true
          type: string
        extensions:
          additionalProperties:
            nullable: true
          nullable: true
          readOnly: true
          type: object
      type: object
    EdGraph.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.Role:
      additionalProperties: false
      example:
        isDefault: true
        roleName: roleName
      properties:
        roleName:
          nullable: true
          type: string
        isDefault:
          type: boolean
      type: object
    EdGraph.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.SubscriptionListResponseDto:
      additionalProperties: false
      example:
        gracePeriod: 5
        actualEndDateTime: actualEndDateTime
        assignedLicenses: 2
        lastModifiedDateTime: lastModifiedDateTime
        lastModifiedBy: lastModifiedBy
        createdDateTime: createdDateTime
        endDateTime: endDateTime
        numberOfLicenses: 5
        licenseType: null
        autoAssign: true
        startDateTime: startDateTime
        createdBy: createdBy
        tenantId: tenantId
        subscriptionStatus: null
        subscriptionId: subscriptionId
        applicationId: applicationId
        lastMaxAssignedLicensesDateTime: lastMaxAssignedLicensesDateTime
        maxAssignedLicenses: 7
        applicationName: applicationName
        applicationRoles:
        - isDefault: true
          roleName: roleName
        - isDefault: true
          roleName: roleName
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        applicationName:
          nullable: true
          type: string
        applicationRoles:
          items:
            $ref: '#/components/schemas/EdGraph.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.Role'
          nullable: true
          type: array
        startDateTime:
          nullable: true
          type: string
        endDateTime:
          nullable: true
          type: string
        actualEndDateTime:
          nullable: true
          type: string
        gracePeriod:
          format: int32
          type: integer
        numberOfLicenses:
          format: int32
          type: integer
        assignedLicenses:
          format: int32
          type: integer
        maxAssignedLicenses:
          format: int32
          type: integer
        lastMaxAssignedLicensesDateTime:
          nullable: true
          type: string
        licenseType:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.LicenseType'
        subscriptionStatus:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.SubscriptionStatus'
        autoAssign:
          type: boolean
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
      type: object
    EdGraph.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.SubscriptionListResponseDtoPaginatedItemsViewModel:
      additionalProperties: false
      example:
        data:
        - gracePeriod: 5
          actualEndDateTime: actualEndDateTime
          assignedLicenses: 2
          lastModifiedDateTime: lastModifiedDateTime
          lastModifiedBy: lastModifiedBy
          createdDateTime: createdDateTime
          endDateTime: endDateTime
          numberOfLicenses: 5
          licenseType: null
          autoAssign: true
          startDateTime: startDateTime
          createdBy: createdBy
          tenantId: tenantId
          subscriptionStatus: null
          subscriptionId: subscriptionId
          applicationId: applicationId
          lastMaxAssignedLicensesDateTime: lastMaxAssignedLicensesDateTime
          maxAssignedLicenses: 7
          applicationName: applicationName
          applicationRoles:
          - isDefault: true
            roleName: roleName
          - isDefault: true
            roleName: roleName
        - gracePeriod: 5
          actualEndDateTime: actualEndDateTime
          assignedLicenses: 2
          lastModifiedDateTime: lastModifiedDateTime
          lastModifiedBy: lastModifiedBy
          createdDateTime: createdDateTime
          endDateTime: endDateTime
          numberOfLicenses: 5
          licenseType: null
          autoAssign: true
          startDateTime: startDateTime
          createdBy: createdBy
          tenantId: tenantId
          subscriptionStatus: null
          subscriptionId: subscriptionId
          applicationId: applicationId
          lastMaxAssignedLicensesDateTime: lastMaxAssignedLicensesDateTime
          maxAssignedLicenses: 7
          applicationName: applicationName
          applicationRoles:
          - isDefault: true
            roleName: roleName
          - isDefault: true
            roleName: roleName
        pageIndex: 0
        count: 1
        pageSize: 6
      properties:
        pageIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        count:
          format: int64
          type: integer
        data:
          items:
            $ref: '#/components/schemas/EdGraph.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.SubscriptionListResponseDto'
          nullable: true
          type: array
      type: object
    EdGraph.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.SubscriptionProfileResponseDto:
      additionalProperties: false
      example:
        gracePeriod: 0
        actualEndDateTime: actualEndDateTime
        assignedLicenses: 1
        lastModifiedDateTime: lastModifiedDateTime
        lastModifiedBy: lastModifiedBy
        createdDateTime: createdDateTime
        endDateTime: endDateTime
        numberOfLicenses: 6
        licenseType: null
        autoAssign: true
        startDateTime: startDateTime
        createdBy: createdBy
        tenantId: tenantId
        subscriptionStatus: null
        subscriptionId: subscriptionId
        applicationId: applicationId
        lastMaxAssignedLicensesDateTime: lastMaxAssignedLicensesDateTime
        maxAssignedLicenses: 5
        applicationName: applicationName
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        applicationName:
          nullable: true
          type: string
        startDateTime:
          nullable: true
          type: string
        endDateTime:
          nullable: true
          type: string
        actualEndDateTime:
          nullable: true
          type: string
        gracePeriod:
          format: int32
          type: integer
        numberOfLicenses:
          format: int32
          type: integer
        assignedLicenses:
          format: int32
          type: integer
        maxAssignedLicenses:
          format: int32
          type: integer
        lastMaxAssignedLicensesDateTime:
          nullable: true
          type: string
        licenseType:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.LicenseType'
        subscriptionStatus:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.SubscriptionStatus'
        autoAssign:
          type: boolean
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
      type: object
    EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.ApplicationRole:
      additionalProperties: false
      example:
        role: role
        isAssigned: true
      properties:
        role:
          description: The role associated with the application
          nullable: true
          type: string
        isAssigned:
          description: Indicates if the user is assigned license for this application
          type: boolean
      type: object
    ? EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.ApplicationTileResponseWithUserApplicationLicense
    : additionalProperties: false
      example:
        documentationUrl: documentationUrl
        isUserLicensed: true
        showInQuickLauncher: true
        lightIconUrl: lightIconUrl
        darkIconUrl: darkIconUrl
        subscriptionTenantId: subscriptionTenantId
        lightOverlayTileUrl: lightOverlayTileUrl
        tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
        applicationName: applicationName
        tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
        showInAppLauncher: true
        tooltipText: tooltipText
        lightBackgroundTileUrl: lightBackgroundTileUrl
        tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
        groups: groups
        version: version
        tags: tags
        darkBackgroundTileUrl: darkBackgroundTileUrl
        applicationDescription: applicationDescription
        isTenantSubscribed: true
        applicationUri: applicationUri
        applicationTenantId: applicationTenantId
        applicationId: applicationId
        tenantSubscriptionId: tenantSubscriptionId
        darkOverlayTileUrl: darkOverlayTileUrl
        openInNewWindow: true
      properties:
        applicationTenantId:
          description: The Tenant this application belongs to
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        applicationName:
          nullable: true
          type: string
        applicationDescription:
          nullable: true
          type: string
        documentationUrl:
          nullable: true
          type: string
        applicationUri:
          nullable: true
          type: string
        version:
          nullable: true
          type: string
        tooltipText:
          nullable: true
          type: string
        tags:
          nullable: true
          type: string
        groups:
          nullable: true
          type: string
        lightIconUrl:
          nullable: true
          type: string
        darkIconUrl:
          nullable: true
          type: string
        lightBackgroundTileUrl:
          nullable: true
          type: string
        darkBackgroundTileUrl:
          nullable: true
          type: string
        lightOverlayTileUrl:
          nullable: true
          type: string
        darkOverlayTileUrl:
          nullable: true
          type: string
        showInAppLauncher:
          type: boolean
        showInQuickLauncher:
          type: boolean
        openInNewWindow:
          type: boolean
        isTenantSubscribed:
          type: boolean
        subscriptionTenantId:
          description: The Tenant Id the subscription belongs to
          nullable: true
          type: string
        tenantSubscriptionId:
          description: The Tenant subscription Id
          nullable: true
          type: string
        tenantSubscriptionStartDateTime:
          description: The Tenant subscription start date
          nullable: true
          type: string
        tenantSubscriptionEndDateTime:
          description: The Tenant subscription end date
          nullable: true
          type: string
        tenantSubscriptionActualEndDateTime:
          description: The Tenant subscription end date
          nullable: true
          type: string
        isUserLicensed:
          type: boolean
      type: object
    ? EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.ApplicationTilesResponseWithUserApplicationLicense
    : additionalProperties: false
      example:
        data:
        - documentationUrl: documentationUrl
          isUserLicensed: true
          showInQuickLauncher: true
          lightIconUrl: lightIconUrl
          darkIconUrl: darkIconUrl
          subscriptionTenantId: subscriptionTenantId
          lightOverlayTileUrl: lightOverlayTileUrl
          tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
          applicationName: applicationName
          tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
          showInAppLauncher: true
          tooltipText: tooltipText
          lightBackgroundTileUrl: lightBackgroundTileUrl
          tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
          groups: groups
          version: version
          tags: tags
          darkBackgroundTileUrl: darkBackgroundTileUrl
          applicationDescription: applicationDescription
          isTenantSubscribed: true
          applicationUri: applicationUri
          applicationTenantId: applicationTenantId
          applicationId: applicationId
          tenantSubscriptionId: tenantSubscriptionId
          darkOverlayTileUrl: darkOverlayTileUrl
          openInNewWindow: true
        - documentationUrl: documentationUrl
          isUserLicensed: true
          showInQuickLauncher: true
          lightIconUrl: lightIconUrl
          darkIconUrl: darkIconUrl
          subscriptionTenantId: subscriptionTenantId
          lightOverlayTileUrl: lightOverlayTileUrl
          tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
          applicationName: applicationName
          tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
          showInAppLauncher: true
          tooltipText: tooltipText
          lightBackgroundTileUrl: lightBackgroundTileUrl
          tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
          groups: groups
          version: version
          tags: tags
          darkBackgroundTileUrl: darkBackgroundTileUrl
          applicationDescription: applicationDescription
          isTenantSubscribed: true
          applicationUri: applicationUri
          applicationTenantId: applicationTenantId
          applicationId: applicationId
          tenantSubscriptionId: tenantSubscriptionId
          darkOverlayTileUrl: darkOverlayTileUrl
          openInNewWindow: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.ApplicationTileResponseWithUserApplicationLicense'
          nullable: true
          type: array
      type: object
    EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.TenantStatus:
      enum:
      - Unknown
      - Active
      - Inactive
      type: string
    EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserLicense:
      additionalProperties: false
      example:
        tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
        isUserLicensed: true
        applicationRole:
        - role: role
          isAssigned: true
        - role: role
          isAssigned: true
        assignedLicenses: 5
        subscriptionTenantId: subscriptionTenantId
        tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
        numberOfLicenses: 5
        isTenantSubscribed: true
        tenantSubscriptionId: tenantSubscriptionId
        tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
        applicationTenantId: applicationTenantId
        applicationId: applicationId
        applicationName: applicationName
      properties:
        subscriptionTenantId:
          description: The Tenant Id the subscription belongs to
          nullable: true
          type: string
        isTenantSubscribed:
          description: The Tenant has a subscription license for this application
          type: boolean
        tenantSubscriptionId:
          description: The Tenant subscription Id
          nullable: true
          type: string
        tenantSubscriptionStartDateTime:
          description: The Tenant subscription start date
          nullable: true
          type: string
        tenantSubscriptionEndDateTime:
          description: The Tenant subscription end date
          nullable: true
          type: string
        tenantSubscriptionActualEndDateTime:
          description: The Tenant subscription end date
          nullable: true
          type: string
        numberOfLicenses:
          description: The Tenant's number of licenses
          format: int32
          type: integer
        assignedLicenses:
          description: The Tenant's assigned of licenses
          format: int32
          type: integer
        isUserLicensed:
          description: The user is assigned license for this application
          type: boolean
        applicationTenantId:
          description: The Tenant this application belongs to
          nullable: true
          type: string
        applicationId:
          description: The application Id of the application for license
          nullable: true
          type: string
        applicationName:
          description: The application Name of the application for license
          nullable: true
          type: string
        applicationRole:
          description: Application role for this user.
          items:
            $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.ApplicationRole'
          nullable: true
          type: array
      type: object
    EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserLicensePaginatedItemsViewModel:
      additionalProperties: false
      example:
        data:
        - tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
          isUserLicensed: true
          applicationRole:
          - role: role
            isAssigned: true
          - role: role
            isAssigned: true
          assignedLicenses: 5
          subscriptionTenantId: subscriptionTenantId
          tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
          numberOfLicenses: 5
          isTenantSubscribed: true
          tenantSubscriptionId: tenantSubscriptionId
          tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
          applicationTenantId: applicationTenantId
          applicationId: applicationId
          applicationName: applicationName
        - tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
          isUserLicensed: true
          applicationRole:
          - role: role
            isAssigned: true
          - role: role
            isAssigned: true
          assignedLicenses: 5
          subscriptionTenantId: subscriptionTenantId
          tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
          numberOfLicenses: 5
          isTenantSubscribed: true
          tenantSubscriptionId: tenantSubscriptionId
          tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
          applicationTenantId: applicationTenantId
          applicationId: applicationId
          applicationName: applicationName
        pageIndex: 0
        count: 1
        pageSize: 6
      properties:
        pageIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        count:
          format: int64
          type: integer
        data:
          items:
            $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserLicense'
          nullable: true
          type: array
      type: object
    EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserListResponseWithApplicationLicense:
      additionalProperties: false
      example:
        firstName: firstName
        lastName: lastName
        tenants:
        - roles:
          - roles
          - roles
          tenantId: tenantId
          status: null
        - roles:
          - roles
          - roles
          tenantId: tenantId
          status: null
        licenses:
        - tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
          isUserLicensed: true
          applicationRole:
          - role: role
            isAssigned: true
          - role: role
            isAssigned: true
          assignedLicenses: 5
          subscriptionTenantId: subscriptionTenantId
          tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
          numberOfLicenses: 5
          isTenantSubscribed: true
          tenantSubscriptionId: tenantSubscriptionId
          tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
          applicationTenantId: applicationTenantId
          applicationId: applicationId
          applicationName: applicationName
        - tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
          isUserLicensed: true
          applicationRole:
          - role: role
            isAssigned: true
          - role: role
            isAssigned: true
          assignedLicenses: 5
          subscriptionTenantId: subscriptionTenantId
          tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
          numberOfLicenses: 5
          isTenantSubscribed: true
          tenantSubscriptionId: tenantSubscriptionId
          tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
          applicationTenantId: applicationTenantId
          applicationId: applicationId
          applicationName: applicationName
        lastModifiedDateTime: lastModifiedDateTime
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        createdDateTime: createdDateTime
        userName: userName
        userId: userId
        tenantCount: 5
        email: email
      properties:
        userId:
          nullable: true
          type: string
        userName:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        tenantCount:
          format: int32
          type: integer
        tenants:
          items:
            $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserTenant'
          nullable: true
          type: array
        licenses:
          items:
            $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserLicense'
          nullable: true
          type: array
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
      type: object
    ? EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserListResponseWithApplicationLicensePaginatedItemsViewModel
    : additionalProperties: false
      example:
        data:
        - firstName: firstName
          lastName: lastName
          tenants:
          - roles:
            - roles
            - roles
            tenantId: tenantId
            status: null
          - roles:
            - roles
            - roles
            tenantId: tenantId
            status: null
          licenses:
          - tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
            isUserLicensed: true
            applicationRole:
            - role: role
              isAssigned: true
            - role: role
              isAssigned: true
            assignedLicenses: 5
            subscriptionTenantId: subscriptionTenantId
            tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
            numberOfLicenses: 5
            isTenantSubscribed: true
            tenantSubscriptionId: tenantSubscriptionId
            tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
            applicationTenantId: applicationTenantId
            applicationId: applicationId
            applicationName: applicationName
          - tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
            isUserLicensed: true
            applicationRole:
            - role: role
              isAssigned: true
            - role: role
              isAssigned: true
            assignedLicenses: 5
            subscriptionTenantId: subscriptionTenantId
            tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
            numberOfLicenses: 5
            isTenantSubscribed: true
            tenantSubscriptionId: tenantSubscriptionId
            tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
            applicationTenantId: applicationTenantId
            applicationId: applicationId
            applicationName: applicationName
          lastModifiedDateTime: lastModifiedDateTime
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          createdDateTime: createdDateTime
          userName: userName
          userId: userId
          tenantCount: 5
          email: email
        - firstName: firstName
          lastName: lastName
          tenants:
          - roles:
            - roles
            - roles
            tenantId: tenantId
            status: null
          - roles:
            - roles
            - roles
            tenantId: tenantId
            status: null
          licenses:
          - tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
            isUserLicensed: true
            applicationRole:
            - role: role
              isAssigned: true
            - role: role
              isAssigned: true
            assignedLicenses: 5
            subscriptionTenantId: subscriptionTenantId
            tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
            numberOfLicenses: 5
            isTenantSubscribed: true
            tenantSubscriptionId: tenantSubscriptionId
            tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
            applicationTenantId: applicationTenantId
            applicationId: applicationId
            applicationName: applicationName
          - tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
            isUserLicensed: true
            applicationRole:
            - role: role
              isAssigned: true
            - role: role
              isAssigned: true
            assignedLicenses: 5
            subscriptionTenantId: subscriptionTenantId
            tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
            numberOfLicenses: 5
            isTenantSubscribed: true
            tenantSubscriptionId: tenantSubscriptionId
            tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
            applicationTenantId: applicationTenantId
            applicationId: applicationId
            applicationName: applicationName
          lastModifiedDateTime: lastModifiedDateTime
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          createdDateTime: createdDateTime
          userName: userName
          userId: userId
          tenantCount: 5
          email: email
        pageIndex: 0
        count: 1
        pageSize: 6
      properties:
        pageIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        count:
          format: int64
          type: integer
        data:
          items:
            $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserListResponseWithApplicationLicense'
          nullable: true
          type: array
      type: object
    EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserProfilePreference:
      additionalProperties: false
      example:
        code: code
        value: value
      properties:
        code:
          nullable: true
          type: string
        value:
          nullable: true
          type: string
      type: object
    EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserProfileResponseWithApplicationLicense:
      additionalProperties: false
      example:
        lastName: lastName
        tenants:
        - roles:
          - roles
          - roles
          tenantId: tenantId
          status: null
        - roles:
          - roles
          - roles
          tenantId: tenantId
          status: null
        preferences:
        - code: code
          value: value
        - code: code
          value: value
        lastModifiedDateTime: lastModifiedDateTime
        lockoutEnabled: lockoutEnabled
        lastModifiedBy: lastModifiedBy
        browserDebugEnabled: true
        createdDateTime: createdDateTime
        userName: userName
        userId: userId
        firstName: firstName
        licenses:
        - tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
          isUserLicensed: true
          applicationRole:
          - role: role
            isAssigned: true
          - role: role
            isAssigned: true
          assignedLicenses: 5
          subscriptionTenantId: subscriptionTenantId
          tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
          numberOfLicenses: 5
          isTenantSubscribed: true
          tenantSubscriptionId: tenantSubscriptionId
          tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
          applicationTenantId: applicationTenantId
          applicationId: applicationId
          applicationName: applicationName
        - tenantSubscriptionStartDateTime: tenantSubscriptionStartDateTime
          isUserLicensed: true
          applicationRole:
          - role: role
            isAssigned: true
          - role: role
            isAssigned: true
          assignedLicenses: 5
          subscriptionTenantId: subscriptionTenantId
          tenantSubscriptionEndDateTime: tenantSubscriptionEndDateTime
          numberOfLicenses: 5
          isTenantSubscribed: true
          tenantSubscriptionId: tenantSubscriptionId
          tenantSubscriptionActualEndDateTime: tenantSubscriptionActualEndDateTime
          applicationTenantId: applicationTenantId
          applicationId: applicationId
          applicationName: applicationName
        phoneNumber: phoneNumber
        createdBy: createdBy
        email: email
      properties:
        userId:
          nullable: true
          type: string
        userName:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        phoneNumber:
          nullable: true
          type: string
        lockoutEnabled:
          nullable: true
          type: string
        tenants:
          items:
            $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserTenant'
          nullable: true
          type: array
        preferences:
          items:
            $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserProfilePreference'
          nullable: true
          type: array
        browserDebugEnabled:
          type: boolean
        licenses:
          items:
            $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserLicense'
          nullable: true
          type: array
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
      type: object
    EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserTenant:
      additionalProperties: false
      example:
        roles:
        - roles
        - roles
        tenantId: tenantId
        status: null
      properties:
        tenantId:
          nullable: true
          type: string
        status:
          $ref: '#/components/schemas/EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.TenantStatus'
        roles:
          items:
            type: string
          nullable: true
          type: array
      type: object
    IdentityApi.ApiClient.V1.AccessTokenType:
      enum:
      - Jwt
      - Reference
      type: string
    IdentityApi.ApiClient.V1.ApiClaim:
      additionalProperties: false
      properties:
        applicationId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        value:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.ApiClient.V1.ApiClientCreatedResponse:
      additionalProperties: false
      example:
        clientId: clientId
        secretValue: secretValue
        tenantId: tenantId
      properties:
        tenantId:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
        secretValue:
          nullable: true
          type: string
      type: object
    IdentityApi.ApiClient.V1.ApiClientListResponse:
      additionalProperties: false
      example:
        clientUri: clientUri
        clientId: clientId
        lastModifiedDateTime: lastModifiedDateTime
        clientName: clientName
        createdBy: createdBy
        lastModifiedBy: lastModifiedBy
        tenantId: tenantId
        createdDateTime: createdDateTime
        enabled: true
      properties:
        tenantId:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
        clientName:
          nullable: true
          type: string
        clientUri:
          nullable: true
          type: string
        enabled:
          type: boolean
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
      type: object
    IdentityApi.ApiClient.V1.ApiClientPaginatedItemsResponse:
      additionalProperties: false
      example:
        data:
        - clientUri: clientUri
          clientId: clientId
          lastModifiedDateTime: lastModifiedDateTime
          clientName: clientName
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          tenantId: tenantId
          createdDateTime: createdDateTime
          enabled: true
        - clientUri: clientUri
          clientId: clientId
          lastModifiedDateTime: lastModifiedDateTime
          clientName: clientName
          createdBy: createdBy
          lastModifiedBy: lastModifiedBy
          tenantId: tenantId
          createdDateTime: createdDateTime
          enabled: true
        pageIndex: 5
        count: 2
        pageSize: 5
      properties:
        pageIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        count:
          format: int64
          type: integer
        data:
          items:
            $ref: '#/components/schemas/IdentityApi.ApiClient.V1.ApiClientListResponse'
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.ApiClient.V1.ApiClientPaginatedItemsResponsePaginatedItemsViewModel:
      additionalProperties: false
      example:
        data:
        - data:
          - clientUri: clientUri
            clientId: clientId
            lastModifiedDateTime: lastModifiedDateTime
            clientName: clientName
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            tenantId: tenantId
            createdDateTime: createdDateTime
            enabled: true
          - clientUri: clientUri
            clientId: clientId
            lastModifiedDateTime: lastModifiedDateTime
            clientName: clientName
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            tenantId: tenantId
            createdDateTime: createdDateTime
            enabled: true
          pageIndex: 5
          count: 2
          pageSize: 5
        - data:
          - clientUri: clientUri
            clientId: clientId
            lastModifiedDateTime: lastModifiedDateTime
            clientName: clientName
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            tenantId: tenantId
            createdDateTime: createdDateTime
            enabled: true
          - clientUri: clientUri
            clientId: clientId
            lastModifiedDateTime: lastModifiedDateTime
            clientName: clientName
            createdBy: createdBy
            lastModifiedBy: lastModifiedBy
            tenantId: tenantId
            createdDateTime: createdDateTime
            enabled: true
          pageIndex: 5
          count: 2
          pageSize: 5
        pageIndex: 0
        count: 1
        pageSize: 6
      properties:
        pageIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        count:
          format: int64
          type: integer
        data:
          items:
            $ref: '#/components/schemas/IdentityApi.ApiClient.V1.ApiClientPaginatedItemsResponse'
          nullable: true
          type: array
      type: object
    IdentityApi.ApiClient.V1.ApiClientProfileResponse:
      additionalProperties: false
      example:
        lastModifiedDateTime: lastModifiedDateTime
        clientName: clientName
        identityTokenLifetime: 0
        identityProviderRestrictions:
        - identityProviderRestrictions
        - identityProviderRestrictions
        description: description
        updateAccessTokenClaimsOnRefresh: true
        createdDateTime: createdDateTime
        accessTokenType: null
        enableLocalLogin: true
        enabled: true
        alwaysIncludeUserClaimsInIdToken: true
        allowedGrantTypes:
        - allowedGrantTypes
        - allowedGrantTypes
        authorizationCodeLifetime: 1
        slidingRefreshTokenLifetime: 5
        tokenUsage: null
        postLogoutRedirectUris:
        - postLogoutRedirectUris
        - postLogoutRedirectUris
        accessTokenLifetime: 6
        clientUri: clientUri
        allowAccessTokensViaBrowser: true
        refreshTokenExpiration: null
        allowOfflineAccess: true
        clientId: clientId
        lastModifiedBy: lastModifiedBy
        absoluteRefreshTokenLifetime: 5
        logoUri: logoUri
        redirectUris:
        - redirectUris
        - redirectUris
        allowedScopes:
        - allowedScopes
        - allowedScopes
        requireClientSecret: true
        allowedCorsOrigins:
        - allowedCorsOrigins
        - allowedCorsOrigins
        createdBy: createdBy
        requireConsent: true
        tenantId: tenantId
        claims:
        - type: type
          value: value
        - type: type
          value: value
        requirePkce: true
      properties:
        tenantId:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
        clientName:
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        clientUri:
          nullable: true
          type: string
        logoUri:
          nullable: true
          type: string
        enabled:
          type: boolean
        accessTokenType:
          $ref: '#/components/schemas/IdentityApi.ApiClient.V1.AccessTokenType'
        tokenUsage:
          $ref: '#/components/schemas/IdentityApi.ApiClient.V1.TokenUsage'
        refreshTokenExpiration:
          $ref: '#/components/schemas/IdentityApi.ApiClient.V1.TokenExpiration'
        enableLocalLogin:
          type: boolean
        allowOfflineAccess:
          type: boolean
        allowAccessTokensViaBrowser:
          type: boolean
        updateAccessTokenClaimsOnRefresh:
          type: boolean
        alwaysIncludeUserClaimsInIdToken:
          type: boolean
        identityTokenLifetime:
          format: int32
          type: integer
        accessTokenLifetime:
          format: int32
          type: integer
        authorizationCodeLifetime:
          format: int32
          type: integer
        absoluteRefreshTokenLifetime:
          format: int32
          type: integer
        slidingRefreshTokenLifetime:
          format: int32
          type: integer
        requireClientSecret:
          type: boolean
        requireConsent:
          type: boolean
        allowedScopes:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        allowedCorsOrigins:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        allowedGrantTypes:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        identityProviderRestrictions:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        redirectUris:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        postLogoutRedirectUris:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        claims:
          items:
            $ref: '#/components/schemas/IdentityApi.ApiClient.V1.Claim'
          nullable: true
          readOnly: true
          type: array
        requirePkce:
          type: boolean
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
      type: object
    IdentityApi.ApiClient.V1.ApiClientSecretRegeneratedResponse:
      additionalProperties: false
      example:
        clientId: clientId
        secretValue: secretValue
        tenantId: tenantId
      properties:
        tenantId:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
        secretValue:
          nullable: true
          type: string
      type: object
    IdentityApi.ApiClient.V1.ApiClientUpdatedResponse:
      additionalProperties: false
      example:
        clientId: clientId
        tenantId: tenantId
      properties:
        tenantId:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
      type: object
    IdentityApi.ApiClient.V1.Claim:
      additionalProperties: false
      example:
        type: type
        value: value
      properties:
        type:
          nullable: true
          type: string
        value:
          nullable: true
          type: string
      type: object
    IdentityApi.ApiClient.V1.CreateApiClientRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        clientName:
          nullable: true
          type: string
        enabled:
          type: boolean
        apiClaims:
          items:
            $ref: '#/components/schemas/IdentityApi.ApiClient.V1.ApiClaim'
          nullable: true
          readOnly: true
          type: array
        secretExpirationDateTime:
          nullable: true
          type: string
      type: object
    IdentityApi.ApiClient.V1.RegenerateApiClientSecretRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
        secretExpirationDateTime:
          nullable: true
          type: string
      type: object
    IdentityApi.ApiClient.V1.TokenExpiration:
      enum:
      - Sliding
      - Absolute
      type: string
    IdentityApi.ApiClient.V1.TokenUsage:
      enum:
      - ReUse
      - OneTimeOnly
      type: string
    IdentityApi.ApiClient.V1.UpdateApiClientRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
        clientName:
          nullable: true
          type: string
        enabled:
          type: boolean
        apiClaims:
          items:
            $ref: '#/components/schemas/IdentityApi.ApiClient.V1.ApiClaim'
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.ClientSettingsType.V1.ClientSettingsTypeResponse:
      additionalProperties: false
      example:
        clientId: clientId
        code: code
        lastModifiedDateTime: lastModifiedDateTime
        hidden: true
        defaultValue: defaultValue
        maxValue: 2
        dataType: dataType
        lastModifiedBy: lastModifiedBy
        createdDateTime: createdDateTime
        label: label
        minValue: 5
        createdBy: createdBy
        inputType: inputType
        id: id
        htmlElement: htmlElement
        maxLength: 7
        order: 5
      properties:
        id:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
        code:
          nullable: true
          type: string
        dataType:
          nullable: true
          type: string
        order:
          format: int32
          type: integer
        hidden:
          type: boolean
        htmlElement:
          description: Html attributes
          nullable: true
          type: string
        label:
          nullable: true
          type: string
        inputType:
          nullable: true
          type: string
        defaultValue:
          nullable: true
          type: string
        minValue:
          format: int32
          nullable: true
          type: integer
        maxValue:
          format: int32
          nullable: true
          type: integer
        maxLength:
          format: int32
          nullable: true
          type: integer
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
      type: object
    IdentityApi.ClientSettingsType.V1.GetClientSettingsTypesResponse:
      additionalProperties: false
      example:
        data:
        - clientId: clientId
          code: code
          lastModifiedDateTime: lastModifiedDateTime
          hidden: true
          defaultValue: defaultValue
          maxValue: 2
          dataType: dataType
          lastModifiedBy: lastModifiedBy
          createdDateTime: createdDateTime
          label: label
          minValue: 5
          createdBy: createdBy
          inputType: inputType
          id: id
          htmlElement: htmlElement
          maxLength: 7
          order: 5
        - clientId: clientId
          code: code
          lastModifiedDateTime: lastModifiedDateTime
          hidden: true
          defaultValue: defaultValue
          maxValue: 2
          dataType: dataType
          lastModifiedBy: lastModifiedBy
          createdDateTime: createdDateTime
          label: label
          minValue: 5
          createdBy: createdBy
          inputType: inputType
          id: id
          htmlElement: htmlElement
          maxLength: 7
          order: 5
        pageIndex: 0
        count: 1
        pageSize: 6
      properties:
        pageIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        count:
          format: int64
          type: integer
        data:
          items:
            $ref: '#/components/schemas/IdentityApi.ClientSettingsType.V1.ClientSettingsTypeResponse'
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.Invitation.V1.AssignLicenseRequest:
      additionalProperties: false
      example:
        roles:
        - roles
        - roles
        tenantId: tenantId
        subscriptionId: subscriptionId
        applicationId: applicationId
        userId: userId
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
        roles:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.Invitation.V1.InvitationListResponse:
      additionalProperties: false
      example:
        assignLicenseRequests:
        - roles:
          - roles
          - roles
          tenantId: tenantId
          subscriptionId: subscriptionId
          applicationId: applicationId
          userId: userId
        - roles:
          - roles
          - roles
          tenantId: tenantId
          subscriptionId: subscriptionId
          applicationId: applicationId
          userId: userId
        firstName: firstName
        lastName: lastName
        invitationSentDateTime: invitationSentDateTime
        role: role
        tenantId: tenantId
        invitationId: invitationId
        invitationToken: invitationToken
        invitationStatus: null
        email: email
      properties:
        tenantId:
          nullable: true
          type: string
        invitationId:
          nullable: true
          type: string
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        role:
          nullable: true
          type: string
        invitationToken:
          nullable: true
          type: string
        invitationStatus:
          $ref: '#/components/schemas/IdentityApi.Invitation.V1.InvitationStatus'
        invitationSentDateTime:
          nullable: true
          type: string
        assignLicenseRequests:
          items:
            $ref: '#/components/schemas/IdentityApi.Invitation.V1.AssignLicenseRequest'
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.Invitation.V1.InvitationListResponsePaginatedItemsViewModel:
      additionalProperties: false
      example:
        data:
        - assignLicenseRequests:
          - roles:
            - roles
            - roles
            tenantId: tenantId
            subscriptionId: subscriptionId
            applicationId: applicationId
            userId: userId
          - roles:
            - roles
            - roles
            tenantId: tenantId
            subscriptionId: subscriptionId
            applicationId: applicationId
            userId: userId
          firstName: firstName
          lastName: lastName
          invitationSentDateTime: invitationSentDateTime
          role: role
          tenantId: tenantId
          invitationId: invitationId
          invitationToken: invitationToken
          invitationStatus: null
          email: email
        - assignLicenseRequests:
          - roles:
            - roles
            - roles
            tenantId: tenantId
            subscriptionId: subscriptionId
            applicationId: applicationId
            userId: userId
          - roles:
            - roles
            - roles
            tenantId: tenantId
            subscriptionId: subscriptionId
            applicationId: applicationId
            userId: userId
          firstName: firstName
          lastName: lastName
          invitationSentDateTime: invitationSentDateTime
          role: role
          tenantId: tenantId
          invitationId: invitationId
          invitationToken: invitationToken
          invitationStatus: null
          email: email
        pageIndex: 0
        count: 1
        pageSize: 6
      properties:
        pageIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        count:
          format: int64
          type: integer
        data:
          items:
            $ref: '#/components/schemas/IdentityApi.Invitation.V1.InvitationListResponse'
          nullable: true
          type: array
      type: object
    IdentityApi.Invitation.V1.InvitationResponse:
      additionalProperties: false
      example:
        assignLicenseRequests:
        - roles:
          - roles
          - roles
          tenantId: tenantId
          subscriptionId: subscriptionId
          applicationId: applicationId
          userId: userId
        - roles:
          - roles
          - roles
          tenantId: tenantId
          subscriptionId: subscriptionId
          applicationId: applicationId
          userId: userId
        firstName: firstName
        lastName: lastName
        invitationSentDateTime: invitationSentDateTime
        role: role
        tenantId: tenantId
        invitationId: invitationId
        invitationToken: invitationToken
        invitationStatus: null
        email: email
      properties:
        tenantId:
          nullable: true
          type: string
        invitationId:
          nullable: true
          type: string
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        role:
          nullable: true
          type: string
        invitationToken:
          nullable: true
          type: string
        invitationStatus:
          $ref: '#/components/schemas/IdentityApi.Invitation.V1.InvitationStatus'
        invitationSentDateTime:
          nullable: true
          type: string
        assignLicenseRequests:
          items:
            $ref: '#/components/schemas/IdentityApi.Invitation.V1.AssignLicenseRequest'
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.Invitation.V1.InvitationSentResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
        invitationId: invitationId
      properties:
        tenantId:
          nullable: true
          type: string
        invitationId:
          nullable: true
          type: string
      type: object
    IdentityApi.Invitation.V1.InvitationStatus:
      enum:
      - Unknown
      - Sent
      - Accepted
      type: string
    IdentityApi.Invitation.V1.SendInvitationRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        role:
          nullable: true
          type: string
        assignLicenseRequests:
          items:
            $ref: '#/components/schemas/IdentityApi.Invitation.V1.AssignLicenseRequest'
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.User.V1.ActivateUserRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    IdentityApi.User.V1.AssignLicenseBulkRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
        assignLicenseRequests:
          items:
            $ref: '#/components/schemas/IdentityApi.User.V1.AssignLicenseRequest'
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.User.V1.AssignLicenseRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
        roles:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.User.V1.CreateLocalUserRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        userName:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        role:
          nullable: true
          type: string
        phoneNumber:
          nullable: true
          type: string
        lockoutEnabled:
          type: boolean
        password:
          nullable: true
          type: string
        autoGeneratedPassword:
          type: boolean
        twoFactorEnabled:
          type: boolean
        assignLicenseRequests:
          items:
            $ref: '#/components/schemas/IdentityApi.User.V1.AssignLicenseRequest'
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.User.V1.DeactivateUserRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    IdentityApi.User.V1.LicenseAssignedBulkResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
        userId: userId
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    IdentityApi.User.V1.LicenseAssignedResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
        subscriptionId: subscriptionId
        applicationId: applicationId
        userId: userId
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    IdentityApi.User.V1.LicenseRevokedBulkResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
        userId: userId
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    IdentityApi.User.V1.LicenseRevokedResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
        subscriptionId: subscriptionId
        applicationId: applicationId
        userId: userId
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    IdentityApi.User.V1.LocalUserCreatedResponse:
      additionalProperties: false
      example:
        password: password
        tenantId: tenantId
        userId: userId
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
      type: object
    IdentityApi.User.V1.PasswordResettedResponse:
      additionalProperties: false
      example:
        password: password
        tenantId: tenantId
        userId: userId
        autoGeneratedPassword: true
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
        autoGeneratedPassword:
          type: boolean
      type: object
    IdentityApi.User.V1.ResetPasswordRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
        autoGeneratedPassword:
          type: boolean
      type: object
    IdentityApi.User.V1.RevokeLicenseBulkRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
        revokeLicenseRequests:
          items:
            $ref: '#/components/schemas/IdentityApi.User.V1.RevokeLicenseRequest'
          nullable: true
          readOnly: true
          type: array
      type: object
    IdentityApi.User.V1.RevokeLicenseRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    IdentityApi.User.V1.UpdateUserRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        firstName:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        role:
          nullable: true
          type: string
        phoneNumber:
          nullable: true
          type: string
        lockoutEnabled:
          type: boolean
      type: object
    IdentityApi.User.V1.UserActivatedResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
        userId: userId
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    IdentityApi.User.V1.UserDeactivatedResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
        userId: userId
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    IdentityApi.User.V1.UserUpdatedResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
        userId: userId
      properties:
        tenantId:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    Microsoft.AspNetCore.Mvc.ValidationProblemDetails:
      additionalProperties: {}
      properties:
        errors:
          additionalProperties:
            items:
              type: string
            type: array
          nullable: true
          type: object
        type:
          nullable: true
          type: string
        title:
          nullable: true
          type: string
        status:
          format: int32
          nullable: true
          type: integer
        detail:
          nullable: true
          type: string
        instance:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.CreateOnboardingStepRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        number:
          format: int32
          type: integer
        description:
          nullable: true
          type: string
        status:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.CreateOrganizationRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        identifierType:
          nullable: true
          type: string
        identifierValue:
          nullable: true
          type: string
        discriminator:
          nullable: true
          type: string
        source:
          nullable: true
          type: string
        includeInJwt:
          type: boolean
      type: object
    TenantApi.Tenant.V1.CreateSubscriptionRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        startDateTime:
          nullable: true
          type: string
        endDateTime:
          nullable: true
          type: string
        gracePeriod:
          format: int32
          type: integer
        numberOfLicenses:
          format: int32
          type: integer
        assignedLicenses:
          format: int32
          type: integer
        licenseType:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.LicenseType'
        subscriptionStatus:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.SubscriptionStatus'
        autoAssign:
          type: boolean
      type: object
    TenantApi.Tenant.V1.GetAppSettingsResponse:
      additionalProperties: false
      example:
        data:
        - clientId: clientId
          code: code
          data: data
          dataType: dataType
        - clientId: clientId
          code: code
          data: data
          dataType: dataType
      properties:
        data:
          items:
            $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantAppSettings'
          nullable: true
          readOnly: true
          type: array
      type: object
    TenantApi.Tenant.V1.GetOrganizationsResponse:
      additionalProperties: false
      example:
        organizations:
        - identifierValue: identifierValue
          identifierType: identifierType
          source: source
          includeInJwt: true
          discriminator: discriminator
        - identifierValue: identifierValue
          identifierType: identifierType
          source: source
          includeInJwt: true
          discriminator: discriminator
      properties:
        organizations:
          items:
            $ref: '#/components/schemas/TenantApi.Tenant.V1.Organization'
          nullable: true
          readOnly: true
          type: array
      type: object
    TenantApi.Tenant.V1.LicenseType:
      enum:
      - Unknown
      - Full
      - Trial
      type: string
    TenantApi.Tenant.V1.Onboarding:
      additionalProperties: false
      example:
        completedAt: completedAt
        totalSteps: 2
        startedAt: startedAt
        progressPercentage: 5.637377
        lastCompletedStep: 7
        steps:
        - number: 9
          completedAt: completedAt
          description: description
          startedAt: startedAt
          status: status
        - number: 9
          completedAt: completedAt
          description: description
          startedAt: startedAt
          status: status
        status: status
      properties:
        status:
          nullable: true
          type: string
        progressPercentage:
          format: float
          type: number
        totalSteps:
          format: int32
          type: integer
        lastCompletedStep:
          format: int32
          nullable: true
          type: integer
        startedAt:
          nullable: true
          type: string
        completedAt:
          nullable: true
          type: string
        steps:
          items:
            $ref: '#/components/schemas/TenantApi.Tenant.V1.OnboardingStep'
          nullable: true
          readOnly: true
          type: array
      type: object
    TenantApi.Tenant.V1.OnboardingStep:
      additionalProperties: false
      example:
        number: 9
        completedAt: completedAt
        description: description
        startedAt: startedAt
        status: status
      properties:
        number:
          format: int32
          type: integer
        description:
          nullable: true
          type: string
        status:
          nullable: true
          type: string
        startedAt:
          nullable: true
          type: string
        completedAt:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.Organization:
      additionalProperties: false
      example:
        identifierValue: identifierValue
        identifierType: identifierType
        source: source
        includeInJwt: true
        discriminator: discriminator
      properties:
        identifierType:
          nullable: true
          type: string
        identifierValue:
          nullable: true
          type: string
        discriminator:
          nullable: true
          type: string
        source:
          nullable: true
          type: string
        includeInJwt:
          type: boolean
      type: object
    TenantApi.Tenant.V1.OrganizationCreatedResponse:
      additionalProperties: false
      example:
        identifierValue: identifierValue
        tenantId: tenantId
      properties:
        tenantId:
          nullable: true
          type: string
        identifierValue:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.OrganizationDeletedResponse:
      additionalProperties: false
      example:
        identifierValue: identifierValue
        tenantId: tenantId
      properties:
        tenantId:
          nullable: true
          type: string
        identifierValue:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.OrganizationUpdatedResponse:
      additionalProperties: false
      example:
        identifierValue: identifierValue
        tenantId: tenantId
      properties:
        tenantId:
          nullable: true
          type: string
        identifierValue:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.SetAppSettingsRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
        code:
          nullable: true
          type: string
        data:
          nullable: true
          type: string
        dataType:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.SetAppSettingsResponse:
      additionalProperties: false
      example:
        clientId: clientId
        code: code
        tenantId: tenantId
      properties:
        tenantId:
          nullable: true
          type: string
        clientId:
          nullable: true
          type: string
        code:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.SubscriptionCreatedResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
        subscriptionId: subscriptionId
        applicationId: applicationId
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.SubscriptionProfileResponse:
      additionalProperties: false
      example:
        gracePeriod: 0
        actualEndDateTime: actualEndDateTime
        assignedLicenses: 1
        lastModifiedDateTime: lastModifiedDateTime
        lastModifiedBy: lastModifiedBy
        createdDateTime: createdDateTime
        endDateTime: endDateTime
        numberOfLicenses: 6
        licenseType: null
        autoAssign: true
        startDateTime: startDateTime
        createdBy: createdBy
        tenantId: tenantId
        subscriptionStatus: null
        subscriptionId: subscriptionId
        applicationId: applicationId
        lastMaxAssignedLicensesDateTime: lastMaxAssignedLicensesDateTime
        maxAssignedLicenses: 5
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        applicationId:
          nullable: true
          type: string
        startDateTime:
          nullable: true
          type: string
        endDateTime:
          nullable: true
          type: string
        actualEndDateTime:
          nullable: true
          type: string
        gracePeriod:
          format: int32
          type: integer
        numberOfLicenses:
          format: int32
          type: integer
        assignedLicenses:
          format: int32
          type: integer
        maxAssignedLicenses:
          format: int32
          type: integer
        lastMaxAssignedLicensesDateTime:
          nullable: true
          type: string
        licenseType:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.LicenseType'
        subscriptionStatus:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.SubscriptionStatus'
        autoAssign:
          type: boolean
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.SubscriptionStatus:
      enum:
      - Unknown
      - Active
      - Inactive
      - Pending
      - Rejected
      type: string
    TenantApi.Tenant.V1.SubscriptionUpdatedResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
        subscriptionId: subscriptionId
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.TenantAppSettings:
      additionalProperties: false
      example:
        clientId: clientId
        code: code
        data: data
        dataType: dataType
      properties:
        clientId:
          nullable: true
          type: string
        code:
          nullable: true
          type: string
        data:
          nullable: true
          type: string
        dataType:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.TenantIdentityProviders:
      enum:
      - Local
      - Aad
      - Google
      - Adfs
      type: string
    TenantApi.Tenant.V1.TenantProfileResponse:
      additionalProperties: false
      example:
        tenantType: null
        tenantStatus: null
        subscriptionsMigrated: true
        subscriptions:
        - gracePeriod: 0
          actualEndDateTime: actualEndDateTime
          assignedLicenses: 1
          lastModifiedDateTime: lastModifiedDateTime
          lastModifiedBy: lastModifiedBy
          createdDateTime: createdDateTime
          endDateTime: endDateTime
          numberOfLicenses: 6
          licenseType: null
          autoAssign: true
          startDateTime: startDateTime
          createdBy: createdBy
          tenantId: tenantId
          subscriptionStatus: null
          subscriptionId: subscriptionId
          applicationId: applicationId
          lastMaxAssignedLicensesDateTime: lastMaxAssignedLicensesDateTime
          maxAssignedLicenses: 5
        - gracePeriod: 0
          actualEndDateTime: actualEndDateTime
          assignedLicenses: 1
          lastModifiedDateTime: lastModifiedDateTime
          lastModifiedBy: lastModifiedBy
          createdDateTime: createdDateTime
          endDateTime: endDateTime
          numberOfLicenses: 6
          licenseType: null
          autoAssign: true
          startDateTime: startDateTime
          createdBy: createdBy
          tenantId: tenantId
          subscriptionStatus: null
          subscriptionId: subscriptionId
          applicationId: applicationId
          lastMaxAssignedLicensesDateTime: lastMaxAssignedLicensesDateTime
          maxAssignedLicenses: 5
        identityProviders:
        - null
        - null
        lastModifiedDateTime: lastModifiedDateTime
        organizationName: organizationName
        lastModifiedBy: lastModifiedBy
        domains:
        - domains
        - domains
        createdDateTime: createdDateTime
        isDemo: true
        enforceMfa: true
        createdBy: createdBy
        organizationIdentifier: organizationIdentifier
        tenantId: tenantId
        organizations:
        - identifierValue: identifierValue
          identifierType: identifierType
          source: source
          includeInJwt: true
          discriminator: discriminator
        - identifierValue: identifierValue
          identifierType: identifierType
          source: source
          includeInJwt: true
          discriminator: discriminator
        onboarding:
          completedAt: completedAt
          totalSteps: 2
          startedAt: startedAt
          progressPercentage: 5.637377
          lastCompletedStep: 7
          steps:
          - number: 9
            completedAt: completedAt
            description: description
            startedAt: startedAt
            status: status
          - number: 9
            completedAt: completedAt
            description: description
            startedAt: startedAt
            status: status
          status: status
        state: state
      properties:
        tenantId:
          nullable: true
          type: string
        tenantType:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantType'
        organizationIdentifier:
          nullable: true
          type: string
        organizationName:
          nullable: true
          type: string
        state:
          nullable: true
          type: string
        tenantStatus:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantStatus'
        isDemo:
          type: boolean
        enforceMfa:
          type: boolean
        subscriptionsMigrated:
          type: boolean
        subscriptions:
          items:
            $ref: '#/components/schemas/TenantApi.Tenant.V1.SubscriptionProfileResponse'
          nullable: true
          readOnly: true
          type: array
        domains:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        createdBy:
          nullable: true
          type: string
        createdDateTime:
          nullable: true
          type: string
        lastModifiedBy:
          nullable: true
          type: string
        lastModifiedDateTime:
          nullable: true
          type: string
        identityProviders:
          items:
            $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantIdentityProviders'
          nullable: true
          readOnly: true
          type: array
        onboarding:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.Onboarding'
        organizations:
          items:
            $ref: '#/components/schemas/TenantApi.Tenant.V1.Organization'
          nullable: true
          readOnly: true
          type: array
      type: object
    TenantApi.Tenant.V1.TenantStatus:
      enum:
      - Unknown
      - Active
      - Inactive
      type: string
    TenantApi.Tenant.V1.TenantType:
      enum:
      - Unknown
      - Internal
      - State
      - Collaborative
      - District
      - Partner
      - Teacher
      - Student
      type: string
    TenantApi.Tenant.V1.TenantUpdatedResponse:
      additionalProperties: false
      example:
        tenantId: tenantId
      properties:
        tenantId:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.UpdateOnboardingStepRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        number:
          format: int32
          type: integer
        status:
          nullable: true
          type: string
      type: object
    TenantApi.Tenant.V1.UpdateOrganizationRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        identifierValue:
          nullable: true
          type: string
        discriminator:
          nullable: true
          type: string
        source:
          nullable: true
          type: string
        includeInJwt:
          type: boolean
      type: object
    TenantApi.Tenant.V1.UpdateSubscriptionRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        startDateTime:
          nullable: true
          type: string
        endDateTime:
          nullable: true
          type: string
        gracePeriod:
          format: int32
          type: integer
        numberOfLicenses:
          format: int32
          type: integer
        assignedLicenses:
          format: int32
          type: integer
        licenseType:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.LicenseType'
        autoAssign:
          description: SubscriptionStatus SubscriptionStatus = 10;
          type: boolean
      type: object
    TenantApi.Tenant.V1.UpdateTenantRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        tenantType:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantType'
        organizationIdentifier:
          nullable: true
          type: string
        organizationName:
          nullable: true
          type: string
        state:
          nullable: true
          type: string
        isDemo:
          type: boolean
        enforceMfa:
          type: boolean
        tenantStatus:
          $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantStatus'
        domains:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        identityProviders:
          items:
            $ref: '#/components/schemas/TenantApi.Tenant.V1.TenantIdentityProviders'
          nullable: true
          readOnly: true
          type: array
      type: object
    TenantApi.Webhook.V1.CreateWebhookRequest:
      additionalProperties: false
      properties:
        tenantId:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        url:
          nullable: true
          type: string
        secretHeader:
          nullable: true
          type: string
        secretValue:
          nullable: true
          type: string
        contentType:
          nullable: true
          type: string
        eventSubscriptions:
          items:
            $ref: '#/components/schemas/TenantApi.Webhook.V1.WebhookSubscriberResponse'
          nullable: true
          readOnly: true
          type: array
      type: object
    TenantApi.Webhook.V1.PaginatedItemsResponse:
      additionalProperties: false
      example:
        data:
        - updatedBy: updatedBy
          secretValue: secretValue
          url: url
          createdAt: createdAt
          isDeleted: true
          createdBy: createdBy
          secretHeader: secretHeader
          tenantId: tenantId
          name: name
          id: id
          contentType: contentType
          eventSubscriptions:
          - groupName: groupName
            eventSchema: eventSchema
            eventVersion: eventVersion
            scope: scope
            eventName: eventName
          - groupName: groupName
            eventSchema: eventSchema
            eventVersion: eventVersion
            scope: scope
            eventName: eventName
          updatedAt: updatedAt
          status: status
        - updatedBy: updatedBy
          secretValue: secretValue
          url: url
          createdAt: createdAt
          isDeleted: true
          createdBy: createdBy
          secretHeader: secretHeader
          tenantId: tenantId
          name: name
          id: id
          contentType: contentType
          eventSubscriptions:
          - groupName: groupName
            eventSchema: eventSchema
            eventVersion: eventVersion
            scope: scope
            eventName: eventName
          - groupName: groupName
            eventSchema: eventSchema
            eventVersion: eventVersion
            scope: scope
            eventName: eventName
          updatedAt: updatedAt
          status: status
        pageIndex: 0
        count: 1
        pageSize: 6
      properties:
        pageIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        count:
          format: int64
          type: integer
        data:
          items:
            $ref: '#/components/schemas/TenantApi.Webhook.V1.WebhookResponse'
          nullable: true
          readOnly: true
          type: array
      type: object
    TenantApi.Webhook.V1.UpdateWebhookRequest:
      additionalProperties: false
      properties:
        id:
          nullable: true
          type: string
        tenantId:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        url:
          nullable: true
          type: string
        secretHeader:
          nullable: true
          type: string
        secretValue:
          nullable: true
          type: string
        contentType:
          nullable: true
          type: string
        status:
          nullable: true
          type: string
        eventSubscriptions:
          items:
            $ref: '#/components/schemas/TenantApi.Webhook.V1.WebhookSubscriberResponse'
          nullable: true
          readOnly: true
          type: array
      type: object
    TenantApi.Webhook.V1.WebhookEventsResponse:
      additionalProperties: false
      example:
        eventSubscriptions:
        - groupName: groupName
          eventSchema: eventSchema
          eventVersion: eventVersion
          scope: scope
          eventName: eventName
        - groupName: groupName
          eventSchema: eventSchema
          eventVersion: eventVersion
          scope: scope
          eventName: eventName
      properties:
        eventSubscriptions:
          items:
            $ref: '#/components/schemas/TenantApi.Webhook.V1.WebhookSubscriberResponse'
          nullable: true
          readOnly: true
          type: array
      type: object
    TenantApi.Webhook.V1.WebhookIdResponse:
      additionalProperties: false
      example:
        id: id
      properties:
        id:
          nullable: true
          type: string
      type: object
    TenantApi.Webhook.V1.WebhookResponse:
      additionalProperties: false
      example:
        updatedBy: updatedBy
        secretValue: secretValue
        url: url
        createdAt: createdAt
        isDeleted: true
        createdBy: createdBy
        secretHeader: secretHeader
        tenantId: tenantId
        name: name
        id: id
        contentType: contentType
        eventSubscriptions:
        - groupName: groupName
          eventSchema: eventSchema
          eventVersion: eventVersion
          scope: scope
          eventName: eventName
        - groupName: groupName
          eventSchema: eventSchema
          eventVersion: eventVersion
          scope: scope
          eventName: eventName
        updatedAt: updatedAt
        status: status
      properties:
        id:
          nullable: true
          type: string
        tenantId:
          nullable: true
          type: string
        createdAt:
          nullable: true
          type: string
        createdBy:
          nullable: true
          type: string
        updatedAt:
          nullable: true
          type: string
        updatedBy:
          nullable: true
          type: string
        isDeleted:
          type: boolean
        name:
          nullable: true
          type: string
        url:
          nullable: true
          type: string
        secretHeader:
          nullable: true
          type: string
        secretValue:
          nullable: true
          type: string
        contentType:
          nullable: true
          type: string
        status:
          nullable: true
          type: string
        eventSubscriptions:
          items:
            $ref: '#/components/schemas/TenantApi.Webhook.V1.WebhookSubscriberResponse'
          nullable: true
          readOnly: true
          type: array
      type: object
    TenantApi.Webhook.V1.WebhookSubscriberResponse:
      additionalProperties: false
      description: Webhook Subscribers
      example:
        groupName: groupName
        eventSchema: eventSchema
        eventVersion: eventVersion
        scope: scope
        eventName: eventName
      properties:
        eventName:
          nullable: true
          type: string
        eventVersion:
          nullable: true
          type: string
        eventSchema:
          nullable: true
          type: string
        groupName:
          nullable: true
          type: string
        scope:
          nullable: true
          type: string
      type: object
  securitySchemes:
    oauth2:
      description: Use bearer token generated from an OpenId server
      flows:
        clientCredentials:
          scopes:
            https://api.edgraph.com/tenant: EdGraph Platform - Tenant Api
          tokenUrl: https://login.edgraph.com/connect/token
      type: oauth2

